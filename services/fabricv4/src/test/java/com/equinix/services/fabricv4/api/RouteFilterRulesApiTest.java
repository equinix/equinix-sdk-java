/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.services.fabricv4.api;

import com.equinix.services.fabricv4.ApiException;
import com.equinix.services.fabricv4.model.Error;
import com.equinix.services.fabricv4.model.GetRouteFilterRulesResponse;
import com.equinix.services.fabricv4.model.RouteFilterRulesBase;
import com.equinix.services.fabricv4.model.RouteFilterRulesChangeData;
import com.equinix.services.fabricv4.model.RouteFilterRulesChangeDataResponse;
import com.equinix.services.fabricv4.model.RouteFilterRulesData;
import com.equinix.services.fabricv4.model.RouteFilterRulesPatchRequestItem;
import com.equinix.services.fabricv4.model.RouteFilterRulesPostRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RouteFilterRulesApi
 */
@Disabled
public class RouteFilterRulesApiTest {

    private final RouteFilterRulesApi api = new RouteFilterRulesApi();

    /**
     * Create Route Filter Rule
     *
     * This API provides capability to create a Route Filter Rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteFilterRuleTest() throws ApiException {
        String routeFilterId = null;
        RouteFilterRulesBase routeFilterRulesBase = null;
        RouteFilterRulesData response = api.createRouteFilterRule(routeFilterId, routeFilterRulesBase);
        // TODO: test validations
    }

    /**
     * Bulk Create Route Filter Rules
     *
     * This API provides capability to create bulk route filter rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteFilterRulesInBulkTest() throws ApiException {
        String routeFilterId = null;
        RouteFilterRulesPostRequest routeFilterRulesPostRequest = null;
        GetRouteFilterRulesResponse response = api.createRouteFilterRulesInBulk(routeFilterId, routeFilterRulesPostRequest);
        // TODO: test validations
    }

    /**
     * Delete Route Filter Rule
     *
     * This API provides capability to delete a Route Filter Rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteFilterRuleByUuidTest() throws ApiException {
        String routeFilterId = null;
        String routeFilterRuleId = null;
        RouteFilterRulesData response = api.deleteRouteFilterRuleByUuid(routeFilterId, routeFilterRuleId);
        // TODO: test validations
    }

    /**
     * Get Route Filter Rule By UUID
     *
     * This API provides capability to view a Route Filter Rule by UUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteFilterRuleByUuidTest() throws ApiException {
        String routeFilterId = null;
        String routeFilterRuleId = null;
        RouteFilterRulesData response = api.getRouteFilterRuleByUuid(routeFilterId, routeFilterRuleId);
        // TODO: test validations
    }

    /**
     * Get Change By ID
     *
     * This API provides capability to retrieve a specific Route Filter Rule&#39;s Changes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteFilterRuleChangeByUuidTest() throws ApiException {
        String routeFilterId = null;
        String routeFilterRuleId = null;
        UUID changeId = null;
        RouteFilterRulesChangeData response = api.getRouteFilterRuleChangeByUuid(routeFilterId, routeFilterRuleId, changeId);
        // TODO: test validations
    }

    /**
     * Get All Changes
     *
     * This API provides capability to retrieve all of a Route Filter Rule&#39;s Changes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteFilterRuleChangesTest() throws ApiException {
        String routeFilterId = null;
        String routeFilterRuleId = null;
        Integer offset = null;
        Integer limit = null;
        RouteFilterRulesChangeDataResponse response = api.getRouteFilterRuleChanges(routeFilterId, routeFilterRuleId, offset, limit);
        // TODO: test validations
    }

    /**
     * Get Route Filter Rules
     *
     * This API provides capability to get all Route Filters Rules for Fabric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteFilterRulesTest() throws ApiException {
        String routeFilterId = null;
        Integer offset = null;
        Integer limit = null;
        GetRouteFilterRulesResponse response = api.getRouteFilterRules(routeFilterId, offset, limit);
        // TODO: test validations
    }

    /**
     * Patch Route Filter Rule
     *
     * This API provides capability to partially update a Route Filter Rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchRouteFilterRuleByUuidTest() throws ApiException {
        String routeFilterId = null;
        String routeFilterRuleId = null;
        List<RouteFilterRulesPatchRequestItem> routeFilterRulesPatchRequestItem = null;
        RouteFilterRulesData response = api.patchRouteFilterRuleByUuid(routeFilterId, routeFilterRuleId, routeFilterRulesPatchRequestItem);
        // TODO: test validations
    }

    /**
     * Replace Route Filter Rule
     *
     * This API provides capability to replace a Route Filter Rule completely
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceRouteFilterRuleByUuidTest() throws ApiException {
        String routeFilterId = null;
        String routeFilterRuleId = null;
        RouteFilterRulesBase routeFilterRulesBase = null;
        RouteFilterRulesData response = api.replaceRouteFilterRuleByUuid(routeFilterId, routeFilterRuleId, routeFilterRulesBase);
        // TODO: test validations
    }

}
