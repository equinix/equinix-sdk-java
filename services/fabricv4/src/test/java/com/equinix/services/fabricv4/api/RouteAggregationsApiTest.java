/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.services.fabricv4.api;

import com.equinix.services.fabricv4.ApiException;
import com.equinix.services.fabricv4.model.ConnectionRouteAggregationData;
import com.equinix.services.fabricv4.model.Error;
import com.equinix.services.fabricv4.model.GetAllConnectionRouteAggregationsResponse;
import com.equinix.services.fabricv4.model.GetRouteAggregationGetConnectionsResponse;
import com.equinix.services.fabricv4.model.RouteAggregationChangeData;
import com.equinix.services.fabricv4.model.RouteAggregationChangeDataResponse;
import com.equinix.services.fabricv4.model.RouteAggregationsBase;
import com.equinix.services.fabricv4.model.RouteAggregationsData;
import com.equinix.services.fabricv4.model.RouteAggregationsPatchRequestItem;
import com.equinix.services.fabricv4.model.RouteAggregationsSearchBase;
import com.equinix.services.fabricv4.model.RouteAggregationsSearchResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RouteAggregationsApi
 */
@Disabled
public class RouteAggregationsApiTest {

    private final RouteAggregationsApi api = new RouteAggregationsApi();

    /**
     * Attach Aggregation
     *
     * This API provides capability to attach a Route Aggregation to a Connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachConnectionRouteAggregationTest() throws ApiException {
        String routeAggregationId = null;
        String connectionId = null;
        ConnectionRouteAggregationData response = api.attachConnectionRouteAggregation(routeAggregationId, connectionId);
        // TODO: test validations
    }

    /**
     * Create Aggregations
     *
     * This API provides capability to create a Route Aggregation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteAggregationTest() throws ApiException {
        RouteAggregationsBase routeAggregationsBase = null;
        RouteAggregationsData response = api.createRouteAggregation(routeAggregationsBase);
        // TODO: test validations
    }

    /**
     * Delete Aggregation
     *
     * This API provides capability to delete a Route Aggregation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteAggregationByUuidTest() throws ApiException {
        String routeAggregationId = null;
        RouteAggregationsData response = api.deleteRouteAggregationByUuid(routeAggregationId);
        // TODO: test validations
    }

    /**
     * Detach Aggregation
     *
     * This API provides capability to detach a Route Aggregation from a Connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachConnectionRouteAggregationTest() throws ApiException {
        String routeAggregationId = null;
        String connectionId = null;
        ConnectionRouteAggregationData response = api.detachConnectionRouteAggregation(routeAggregationId, connectionId);
        // TODO: test validations
    }

    /**
     * Get Aggregation
     *
     * This API provides capability to view a specific Route Aggregation attached to a Connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionRouteAggregationByUuidTest() throws ApiException {
        String routeAggregationId = null;
        String connectionId = null;
        ConnectionRouteAggregationData response = api.getConnectionRouteAggregationByUuid(routeAggregationId, connectionId);
        // TODO: test validations
    }

    /**
     * Get All Aggregations
     *
     * This API provides capability to view all Route Aggregations attached to a Connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionRouteAggregationsTest() throws ApiException {
        String connectionId = null;
        GetAllConnectionRouteAggregationsResponse response = api.getConnectionRouteAggregations(connectionId);
        // TODO: test validations
    }

    /**
     * Get Aggregation
     *
     * This API provides capability to view a Route Aggregation by UUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteAggregationByUuidTest() throws ApiException {
        String routeAggregationId = null;
        RouteAggregationsData response = api.getRouteAggregationByUuid(routeAggregationId);
        // TODO: test validations
    }

    /**
     * Get Change By ID
     *
     * This API provides capability to retrieve a specific Route Aggregation&#39;s Changes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteAggregationChangeByUuidTest() throws ApiException {
        String routeAggregationId = null;
        UUID changeId = null;
        RouteAggregationChangeData response = api.getRouteAggregationChangeByUuid(routeAggregationId, changeId);
        // TODO: test validations
    }

    /**
     * Get All Changes
     *
     * This API provides capability to retrieve all of a Route Aggregation&#39;s Changes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteAggregationChangesTest() throws ApiException {
        String routeAggregationId = null;
        Integer offset = null;
        Integer limit = null;
        RouteAggregationChangeDataResponse response = api.getRouteAggregationChanges(routeAggregationId, offset, limit);
        // TODO: test validations
    }

    /**
     * Get All Connections on Route Aggregation
     *
     * This API provides capability to view all Connections using the Route Aggregation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteAggregationConnectionsTest() throws ApiException {
        String routeAggregationId = null;
        GetRouteAggregationGetConnectionsResponse response = api.getRouteAggregationConnections(routeAggregationId);
        // TODO: test validations
    }

    /**
     * Patch Aggregation
     *
     * This API provides capability to partially update a Route Aggregation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchRouteAggregationByUuidTest() throws ApiException {
        String routeAggregationId = null;
        List<RouteAggregationsPatchRequestItem> routeAggregationsPatchRequestItem = null;
        RouteAggregationsData response = api.patchRouteAggregationByUuid(routeAggregationId, routeAggregationsPatchRequestItem);
        // TODO: test validations
    }

    /**
     * Search Aggregations
     *
     * This API provides capability to search Route Aggregations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchRouteAggregationsTest() throws ApiException {
        RouteAggregationsSearchBase routeAggregationsSearchBase = null;
        RouteAggregationsSearchResponse response = api.searchRouteAggregations(routeAggregationsSearchBase);
        // TODO: test validations
    }

}
