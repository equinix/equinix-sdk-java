/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.services.fabricv4.api;

import com.equinix.services.fabricv4.ApiException;
import com.equinix.services.fabricv4.model.Error;
import com.equinix.services.fabricv4.model.PrecisionTimeChangeOperation;
import com.equinix.services.fabricv4.model.PrecisionTimePackageResponse;
import com.equinix.services.fabricv4.model.PrecisionTimeServiceConnectionsResponse;
import com.equinix.services.fabricv4.model.PrecisionTimeServicePackagesResponse;
import com.equinix.services.fabricv4.model.PrecisionTimeServiceRequest;
import com.equinix.services.fabricv4.model.PrecisionTimeServiceResponse;
import com.equinix.services.fabricv4.model.ServiceSearchResponse;
import com.equinix.services.fabricv4.model.TimeServicesSearchRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrecisionTimeApi
 */
@Disabled
public class PrecisionTimeApiTest {

    private final PrecisionTimeApi api = new PrecisionTimeApi();

    /**
     * Create Time Service
     *
     * The API provides capability to create Precision Time service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTimeServicesTest() throws ApiException {
        PrecisionTimeServiceRequest precisionTimeServiceRequest = null;
        PrecisionTimeServiceResponse response = api.createTimeServices(precisionTimeServiceRequest);
        // TODO: test validations
    }

    /**
     * Delete by ID.
     *
     * The API provides capability to delete Precision Time Service by service id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTimeServiceByIdTest() throws ApiException {
        UUID serviceId = null;
        PrecisionTimeServiceResponse response = api.deleteTimeServiceById(serviceId);
        // TODO: test validations
    }

    /**
     * Configure Service.
     *
     * The API provides capability to Configure/Fulfill the Precision Time Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fulfillTimeServicesTest() throws ApiException {
        UUID serviceId = null;
        PrecisionTimeServiceRequest precisionTimeServiceRequest = null;
        PrecisionTimeServiceResponse response = api.fulfillTimeServices(serviceId, precisionTimeServiceRequest);
        // TODO: test validations
    }

    /**
     * Get Service By ID.
     *
     * The API provides capability to get Precision Time Service details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeServicesByIdTest() throws ApiException {
        UUID serviceId = null;
        PrecisionTimeServiceResponse response = api.getTimeServicesById(serviceId);
        // TODO: test validations
    }

    /**
     * Get Connection Links
     *
     * The API provides capability to get prevision timing service&#39;s details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeServicesConnectionsByServiceIdTest() throws ApiException {
        UUID serviceId = null;
        PrecisionTimeServiceConnectionsResponse response = api.getTimeServicesConnectionsByServiceId(serviceId);
        // TODO: test validations
    }

    /**
     * Get Package By Code
     *
     * The API provides capability to get timing service&#39;s package by code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeServicesPackageByCodeTest() throws ApiException {
        String packageCode = null;
        PrecisionTimePackageResponse response = api.getTimeServicesPackageByCode(packageCode);
        // TODO: test validations
    }

    /**
     * Get Packages
     *
     * The API provides capability to get timing service&#39;s packages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeServicesPackagesTest() throws ApiException {
        PrecisionTimeServicePackagesResponse response = api.getTimeServicesPackages();
        // TODO: test validations
    }

    /**
     * Search Time Services
     *
     * The API provides capability to get list of user&#39;s Time Services using search criteria, including optional filtering, pagination and sorting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTimeServicesTest() throws ApiException {
        TimeServicesSearchRequest timeServicesSearchRequest = null;
        ServiceSearchResponse response = api.searchTimeServices(timeServicesSearchRequest);
        // TODO: test validations
    }

    /**
     * Update By ID.
     *
     * The API provides capability to update Precision Time Service by service id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimeServicesByIdTest() throws ApiException {
        UUID serviceId = null;
        List<PrecisionTimeChangeOperation> precisionTimeChangeOperation = null;
        PrecisionTimeServiceResponse response = api.updateTimeServicesById(serviceId, precisionTimeChangeOperation);
        // TODO: test validations
    }

}
