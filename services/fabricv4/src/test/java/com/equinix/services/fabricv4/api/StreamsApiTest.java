/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.services.fabricv4.api;

import com.equinix.services.fabricv4.ApiException;
import com.equinix.services.fabricv4.model.Asset;
import com.equinix.services.fabricv4.model.Error;
import com.equinix.services.fabricv4.model.GetAllStreamAssetResponse;
import com.equinix.services.fabricv4.model.GetAllStreamResponse;
import com.equinix.services.fabricv4.model.GetSubscriptionsInStreamResponse;
import com.equinix.services.fabricv4.model.Stream;
import com.equinix.services.fabricv4.model.StreamAsset;
import com.equinix.services.fabricv4.model.StreamAssetPutRequest;
import com.equinix.services.fabricv4.model.StreamAssetSearchRequest;
import com.equinix.services.fabricv4.model.StreamPostRequest;
import com.equinix.services.fabricv4.model.StreamPutRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StreamsApi
 */
@Disabled
public class StreamsApiTest {

    private final StreamsApi api = new StreamsApi();

    /**
     * Create Stream
     *
     * This API provides capability to create user&#39;s stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamsTest() throws ApiException {
        StreamPostRequest streamPostRequest = null;
        Stream response = api.createStreams(streamPostRequest);
        // TODO: test validations
    }

    /**
     * Detach Asset
     *
     * This API provides capability to detach an asset from a stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamAssetByUuidTest() throws ApiException {
        UUID assetId = null;
        Asset asset = null;
        UUID streamId = null;
        StreamAsset response = api.deleteStreamAssetByUuid(assetId, asset, streamId);
        // TODO: test validations
    }

    /**
     * Delete Stream
     *
     * This API provides capability to delete user&#39;s stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamByUuidTest() throws ApiException {
        UUID streamId = null;
        Stream response = api.deleteStreamByUuid(streamId);
        // TODO: test validations
    }

    /**
     * Get Asset
     *
     * This API provides capability to get user&#39;s assets attached to a stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamAssetByUuidTest() throws ApiException {
        UUID assetId = null;
        Asset asset = null;
        UUID streamId = null;
        StreamAsset response = api.getStreamAssetByUuid(assetId, asset, streamId);
        // TODO: test validations
    }

    /**
     * Get Stream
     *
     * This API provides capability to get user&#39;s stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamByUuidTest() throws ApiException {
        UUID streamId = null;
        Stream response = api.getStreamByUuid(streamId);
        // TODO: test validations
    }

    /**
     * Get Streams
     *
     * This API provides capability to retrieve streams
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamsTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        GetAllStreamResponse response = api.getStreams(offset, limit);
        // TODO: test validations
    }

    /**
     * Get Assets
     *
     * This API provides capability to retrieve stream assets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamsAssetsTest() throws ApiException {
        StreamAssetSearchRequest streamAssetSearchRequest = null;
        Integer offset = null;
        Integer limit = null;
        GetAllStreamAssetResponse response = api.getStreamsAssets(streamAssetSearchRequest, offset, limit);
        // TODO: test validations
    }

    /**
     * Get Stream&#39;s Subs
     *
     * This API provides capability to retrieve subscriptions in a stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionsInStreamTest() throws ApiException {
        UUID streamId = null;
        Integer offset = null;
        Integer limit = null;
        GetSubscriptionsInStreamResponse response = api.getSubscriptionsInStream(streamId, offset, limit);
        // TODO: test validations
    }

    /**
     * Attach Asset
     *
     * This API provides capability to attach an asset to a stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamAssetByUuidTest() throws ApiException {
        UUID assetId = null;
        Asset asset = null;
        UUID streamId = null;
        StreamAssetPutRequest streamAssetPutRequest = null;
        StreamAsset response = api.updateStreamAssetByUuid(assetId, asset, streamId, streamAssetPutRequest);
        // TODO: test validations
    }

    /**
     * Update Stream
     *
     * This API provides capability to update user&#39;s stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamByUuidTest() throws ApiException {
        UUID streamId = null;
        StreamPutRequest streamPutRequest = null;
        Stream response = api.updateStreamByUuid(streamId, streamPutRequest);
        // TODO: test validations
    }

}
