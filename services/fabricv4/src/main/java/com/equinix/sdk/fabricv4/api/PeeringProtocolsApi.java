/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.api;

import com.equinix.sdk.fabricv4.ApiCallback;
import com.equinix.sdk.fabricv4.ApiClient;
import com.equinix.sdk.fabricv4.ApiException;
import com.equinix.sdk.fabricv4.ApiResponse;
import com.equinix.sdk.fabricv4.Configuration;
import com.equinix.sdk.fabricv4.Pair;
import com.equinix.sdk.fabricv4.ProgressRequestBody;
import com.equinix.sdk.fabricv4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.sdk.fabricv4.model.ConnectionPeeringProtocolPostRequest;
import com.equinix.sdk.fabricv4.model.Error;
import com.equinix.sdk.fabricv4.model.PeeringProtocolData;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PeeringProtocolsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeeringProtocolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PeeringProtocolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConnectionPeeringProtocol
     * @param uuid uuid (required)
     * @param connectionPeeringProtocolPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionPeeringProtocolCall(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull ConnectionPeeringProtocolPostRequest connectionPeeringProtocolPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionPeeringProtocolPostRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{uuid}/peeringProtocols"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectionPeeringProtocolValidateBeforeCall(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull ConnectionPeeringProtocolPostRequest connectionPeeringProtocolPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createConnectionPeeringProtocol(Async)");
        }

        // verify the required parameter 'connectionPeeringProtocolPostRequest' is set
        if (connectionPeeringProtocolPostRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionPeeringProtocolPostRequest' when calling createConnectionPeeringProtocol(Async)");
        }

        return createConnectionPeeringProtocolCall(uuid, connectionPeeringProtocolPostRequest, _callback);

    }

    /**
     * Create Peering Protocol
     * This API provides capability to create Peering Protocol for connections
     * @param uuid uuid (required)
     * @param connectionPeeringProtocolPostRequest  (required)
     * @return PeeringProtocolData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PeeringProtocolData createConnectionPeeringProtocol(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull ConnectionPeeringProtocolPostRequest connectionPeeringProtocolPostRequest) throws ApiException {
        ApiResponse<PeeringProtocolData> localVarResp = createConnectionPeeringProtocolWithHttpInfo(uuid, connectionPeeringProtocolPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create Peering Protocol
     * This API provides capability to create Peering Protocol for connections
     * @param uuid uuid (required)
     * @param connectionPeeringProtocolPostRequest  (required)
     * @return ApiResponse&lt;PeeringProtocolData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeeringProtocolData> createConnectionPeeringProtocolWithHttpInfo(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull ConnectionPeeringProtocolPostRequest connectionPeeringProtocolPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createConnectionPeeringProtocolValidateBeforeCall(uuid, connectionPeeringProtocolPostRequest, null);
        Type localVarReturnType = new TypeToken<PeeringProtocolData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Peering Protocol (asynchronously)
     * This API provides capability to create Peering Protocol for connections
     * @param uuid uuid (required)
     * @param connectionPeeringProtocolPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionPeeringProtocolAsync(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull ConnectionPeeringProtocolPostRequest connectionPeeringProtocolPostRequest, final ApiCallback<PeeringProtocolData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectionPeeringProtocolValidateBeforeCall(uuid, connectionPeeringProtocolPostRequest, _callback);
        Type localVarReturnType = new TypeToken<PeeringProtocolData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
