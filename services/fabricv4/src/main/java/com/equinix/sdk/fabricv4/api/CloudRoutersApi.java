/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.api;

import com.equinix.sdk.fabricv4.ApiCallback;
import com.equinix.sdk.fabricv4.ApiClient;
import com.equinix.sdk.fabricv4.ApiException;
import com.equinix.sdk.fabricv4.ApiResponse;
import com.equinix.sdk.fabricv4.Configuration;
import com.equinix.sdk.fabricv4.Pair;
import com.equinix.sdk.fabricv4.ProgressRequestBody;
import com.equinix.sdk.fabricv4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.sdk.fabricv4.model.CloudRouter;
import com.equinix.sdk.fabricv4.model.CloudRouterActionRequest;
import com.equinix.sdk.fabricv4.model.CloudRouterActionResponse;
import com.equinix.sdk.fabricv4.model.CloudRouterActionState;
import com.equinix.sdk.fabricv4.model.CloudRouterActionsSearchRequest;
import com.equinix.sdk.fabricv4.model.CloudRouterActionsSearchResponse;
import com.equinix.sdk.fabricv4.model.CloudRouterChangeOperation;
import com.equinix.sdk.fabricv4.model.CloudRouterCommand;
import com.equinix.sdk.fabricv4.model.CloudRouterCommandPostRequest;
import com.equinix.sdk.fabricv4.model.CloudRouterCommandSearchRequest;
import com.equinix.sdk.fabricv4.model.CloudRouterCommandSearchResponse;
import com.equinix.sdk.fabricv4.model.CloudRouterForGatewayAttachmentResponse;
import com.equinix.sdk.fabricv4.model.CloudRouterListForGatewayAttachment;
import com.equinix.sdk.fabricv4.model.CloudRouterPackage;
import com.equinix.sdk.fabricv4.model.CloudRouterPostRequest;
import com.equinix.sdk.fabricv4.model.CloudRouterSearchRequest;
import com.equinix.sdk.fabricv4.model.ConnectionRouteSearchRequest;
import com.equinix.sdk.fabricv4.model.ConnectionRouteTableEntrySearchResponse;
import com.equinix.sdk.fabricv4.model.Error;
import com.equinix.sdk.fabricv4.model.GetAllCloudRouterCommands;
import com.equinix.sdk.fabricv4.model.PackageResponse;
import com.equinix.sdk.fabricv4.model.RouteTableEntrySearchRequest;
import com.equinix.sdk.fabricv4.model.RouteTableEntrySearchResponse;
import com.equinix.sdk.fabricv4.model.RouterPackageCode;
import com.equinix.sdk.fabricv4.model.SearchResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudRoutersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CloudRoutersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudRoutersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCloudRouter
     * @param cloudRouterPostRequest  (required)
     * @param dryRun option to verify that API calls will succeed (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudRouterCall(@javax.annotation.Nonnull CloudRouterPostRequest cloudRouterPostRequest, @javax.annotation.Nullable Boolean dryRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRouterPostRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dryRun != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dryRun", dryRun));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCloudRouterValidateBeforeCall(@javax.annotation.Nonnull CloudRouterPostRequest cloudRouterPostRequest, @javax.annotation.Nullable Boolean dryRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cloudRouterPostRequest' is set
        if (cloudRouterPostRequest == null) {
            throw new ApiException("Missing the required parameter 'cloudRouterPostRequest' when calling createCloudRouter(Async)");
        }

        return createCloudRouterCall(cloudRouterPostRequest, dryRun, _callback);

    }

    /**
     * Create Routers
     * This API provides capability to create user&#39;s Cloud Routers
     * @param cloudRouterPostRequest  (required)
     * @param dryRun option to verify that API calls will succeed (optional, default to false)
     * @return CloudRouter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouter createCloudRouter(@javax.annotation.Nonnull CloudRouterPostRequest cloudRouterPostRequest, @javax.annotation.Nullable Boolean dryRun) throws ApiException {
        ApiResponse<CloudRouter> localVarResp = createCloudRouterWithHttpInfo(cloudRouterPostRequest, dryRun);
        return localVarResp.getData();
    }

    /**
     * Create Routers
     * This API provides capability to create user&#39;s Cloud Routers
     * @param cloudRouterPostRequest  (required)
     * @param dryRun option to verify that API calls will succeed (optional, default to false)
     * @return ApiResponse&lt;CloudRouter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouter> createCloudRouterWithHttpInfo(@javax.annotation.Nonnull CloudRouterPostRequest cloudRouterPostRequest, @javax.annotation.Nullable Boolean dryRun) throws ApiException {
        okhttp3.Call localVarCall = createCloudRouterValidateBeforeCall(cloudRouterPostRequest, dryRun, null);
        Type localVarReturnType = new TypeToken<CloudRouter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Routers (asynchronously)
     * This API provides capability to create user&#39;s Cloud Routers
     * @param cloudRouterPostRequest  (required)
     * @param dryRun option to verify that API calls will succeed (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudRouterAsync(@javax.annotation.Nonnull CloudRouterPostRequest cloudRouterPostRequest, @javax.annotation.Nullable Boolean dryRun, final ApiCallback<CloudRouter> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCloudRouterValidateBeforeCall(cloudRouterPostRequest, dryRun, _callback);
        Type localVarReturnType = new TypeToken<CloudRouter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCloudRouterAction
     * @param routerId Router UUID (required)
     * @param cloudRouterActionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudRouterActionCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionRequest cloudRouterActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRouterActionRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/actions"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCloudRouterActionValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionRequest cloudRouterActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling createCloudRouterAction(Async)");
        }

        // verify the required parameter 'cloudRouterActionRequest' is set
        if (cloudRouterActionRequest == null) {
            throw new ApiException("Missing the required parameter 'cloudRouterActionRequest' when calling createCloudRouterAction(Async)");
        }

        return createCloudRouterActionCall(routerId, cloudRouterActionRequest, _callback);

    }

    /**
     * Create Route Table Action
     * This API provides capability to refresh route table and bgp session summary information
     * @param routerId Router UUID (required)
     * @param cloudRouterActionRequest  (required)
     * @return CloudRouterActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterActionResponse createCloudRouterAction(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionRequest cloudRouterActionRequest) throws ApiException {
        ApiResponse<CloudRouterActionResponse> localVarResp = createCloudRouterActionWithHttpInfo(routerId, cloudRouterActionRequest);
        return localVarResp.getData();
    }

    /**
     * Create Route Table Action
     * This API provides capability to refresh route table and bgp session summary information
     * @param routerId Router UUID (required)
     * @param cloudRouterActionRequest  (required)
     * @return ApiResponse&lt;CloudRouterActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterActionResponse> createCloudRouterActionWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionRequest cloudRouterActionRequest) throws ApiException {
        okhttp3.Call localVarCall = createCloudRouterActionValidateBeforeCall(routerId, cloudRouterActionRequest, null);
        Type localVarReturnType = new TypeToken<CloudRouterActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Route Table Action (asynchronously)
     * This API provides capability to refresh route table and bgp session summary information
     * @param routerId Router UUID (required)
     * @param cloudRouterActionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudRouterActionAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionRequest cloudRouterActionRequest, final ApiCallback<CloudRouterActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCloudRouterActionValidateBeforeCall(routerId, cloudRouterActionRequest, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCloudRouterCommand
     * @param routerId Router UUID (required)
     * @param cloudRouterCommandPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudRouterCommandCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandPostRequest cloudRouterCommandPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRouterCommandPostRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/commands"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCloudRouterCommandValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandPostRequest cloudRouterCommandPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling createCloudRouterCommand(Async)");
        }

        // verify the required parameter 'cloudRouterCommandPostRequest' is set
        if (cloudRouterCommandPostRequest == null) {
            throw new ApiException("Missing the required parameter 'cloudRouterCommandPostRequest' when calling createCloudRouterCommand(Async)");
        }

        return createCloudRouterCommandCall(routerId, cloudRouterCommandPostRequest, _callback);

    }

    /**
     * Initiate Command
     * This API provides capability to initiate Command
     * @param routerId Router UUID (required)
     * @param cloudRouterCommandPostRequest  (required)
     * @return CloudRouterCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterCommand createCloudRouterCommand(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandPostRequest cloudRouterCommandPostRequest) throws ApiException {
        ApiResponse<CloudRouterCommand> localVarResp = createCloudRouterCommandWithHttpInfo(routerId, cloudRouterCommandPostRequest);
        return localVarResp.getData();
    }

    /**
     * Initiate Command
     * This API provides capability to initiate Command
     * @param routerId Router UUID (required)
     * @param cloudRouterCommandPostRequest  (required)
     * @return ApiResponse&lt;CloudRouterCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterCommand> createCloudRouterCommandWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandPostRequest cloudRouterCommandPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createCloudRouterCommandValidateBeforeCall(routerId, cloudRouterCommandPostRequest, null);
        Type localVarReturnType = new TypeToken<CloudRouterCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Command (asynchronously)
     * This API provides capability to initiate Command
     * @param routerId Router UUID (required)
     * @param cloudRouterCommandPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudRouterCommandAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandPostRequest cloudRouterCommandPostRequest, final ApiCallback<CloudRouterCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCloudRouterCommandValidateBeforeCall(routerId, cloudRouterCommandPostRequest, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCloudRouterByUuid
     * @param routerId Cloud Router UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Cloud Router Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudRouterByUuidCall(@javax.annotation.Nonnull UUID routerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCloudRouterByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling deleteCloudRouterByUuid(Async)");
        }

        return deleteCloudRouterByUuidCall(routerId, _callback);

    }

    /**
     * Delete Routers
     * This API provides capability to delete user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Cloud Router Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCloudRouterByUuid(@javax.annotation.Nonnull UUID routerId) throws ApiException {
        deleteCloudRouterByUuidWithHttpInfo(routerId);
    }

    /**
     * Delete Routers
     * This API provides capability to delete user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Cloud Router Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCloudRouterByUuidWithHttpInfo(@javax.annotation.Nonnull UUID routerId) throws ApiException {
        okhttp3.Call localVarCall = deleteCloudRouterByUuidValidateBeforeCall(routerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Routers (asynchronously)
     * This API provides capability to delete user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Cloud Router Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudRouterByUuidAsync(@javax.annotation.Nonnull UUID routerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCloudRouterByUuidValidateBeforeCall(routerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCloudRouterCommandByUuid
     * @param routerId Router UUID (required)
     * @param commandId Command UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted command successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudRouterCommandByUuidCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/commands/{commandId}"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()))
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCloudRouterCommandByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling deleteCloudRouterCommandByUuid(Async)");
        }

        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling deleteCloudRouterCommandByUuid(Async)");
        }

        return deleteCloudRouterCommandByUuidCall(routerId, commandId, _callback);

    }

    /**
     * Delete Command
     * This API provides capability to delete command based on command Id
     * @param routerId Router UUID (required)
     * @param commandId Command UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted command successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCloudRouterCommandByUuid(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId) throws ApiException {
        deleteCloudRouterCommandByUuidWithHttpInfo(routerId, commandId);
    }

    /**
     * Delete Command
     * This API provides capability to delete command based on command Id
     * @param routerId Router UUID (required)
     * @param commandId Command UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted command successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCloudRouterCommandByUuidWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId) throws ApiException {
        okhttp3.Call localVarCall = deleteCloudRouterCommandByUuidValidateBeforeCall(routerId, commandId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Command (asynchronously)
     * This API provides capability to delete command based on command Id
     * @param routerId Router UUID (required)
     * @param commandId Command UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted command successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudRouterCommandByUuidAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCloudRouterCommandByUuidValidateBeforeCall(routerId, commandId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCloudRouterCommands
     * @param routerId Router UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCloudRouterCommandsCall(@javax.annotation.Nonnull UUID routerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/commands"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCloudRouterCommandsValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling getAllCloudRouterCommands(Async)");
        }

        return getAllCloudRouterCommandsCall(routerId, _callback);

    }

    /**
     * Get Commands
     * This API provides capability to fetch all commands
     * @param routerId Router UUID (required)
     * @return GetAllCloudRouterCommands
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetAllCloudRouterCommands getAllCloudRouterCommands(@javax.annotation.Nonnull UUID routerId) throws ApiException {
        ApiResponse<GetAllCloudRouterCommands> localVarResp = getAllCloudRouterCommandsWithHttpInfo(routerId);
        return localVarResp.getData();
    }

    /**
     * Get Commands
     * This API provides capability to fetch all commands
     * @param routerId Router UUID (required)
     * @return ApiResponse&lt;GetAllCloudRouterCommands&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllCloudRouterCommands> getAllCloudRouterCommandsWithHttpInfo(@javax.annotation.Nonnull UUID routerId) throws ApiException {
        okhttp3.Call localVarCall = getAllCloudRouterCommandsValidateBeforeCall(routerId, null);
        Type localVarReturnType = new TypeToken<GetAllCloudRouterCommands>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Commands (asynchronously)
     * This API provides capability to fetch all commands
     * @param routerId Router UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCloudRouterCommandsAsync(@javax.annotation.Nonnull UUID routerId, final ApiCallback<GetAllCloudRouterCommands> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCloudRouterCommandsValidateBeforeCall(routerId, _callback);
        Type localVarReturnType = new TypeToken<GetAllCloudRouterCommands>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudRouterActions
     * @param routerId Router UUID (required)
     * @param state Action state (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterActionsCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nullable CloudRouterActionState state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/actions"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudRouterActionsValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nullable CloudRouterActionState state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling getCloudRouterActions(Async)");
        }

        return getCloudRouterActionsCall(routerId, state, _callback);

    }

    /**
     * Get Route Table Actions
     * This API provides capability to fetch action status
     * @param routerId Router UUID (required)
     * @param state Action state (optional)
     * @return CloudRouterActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterActionResponse getCloudRouterActions(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nullable CloudRouterActionState state) throws ApiException {
        ApiResponse<CloudRouterActionResponse> localVarResp = getCloudRouterActionsWithHttpInfo(routerId, state);
        return localVarResp.getData();
    }

    /**
     * Get Route Table Actions
     * This API provides capability to fetch action status
     * @param routerId Router UUID (required)
     * @param state Action state (optional)
     * @return ApiResponse&lt;CloudRouterActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterActionResponse> getCloudRouterActionsWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nullable CloudRouterActionState state) throws ApiException {
        okhttp3.Call localVarCall = getCloudRouterActionsValidateBeforeCall(routerId, state, null);
        Type localVarReturnType = new TypeToken<CloudRouterActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Route Table Actions (asynchronously)
     * This API provides capability to fetch action status
     * @param routerId Router UUID (required)
     * @param state Action state (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterActionsAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nullable CloudRouterActionState state, final ApiCallback<CloudRouterActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudRouterActionsValidateBeforeCall(routerId, state, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudRouterActionsByUuid
     * @param routerId Router UUID (required)
     * @param actionId Action UUID (required)
     * @param state Action state (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterActionsByUuidCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID actionId, @javax.annotation.Nullable CloudRouterActionState state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/actions/{actionId}"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()))
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudRouterActionsByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID actionId, @javax.annotation.Nullable CloudRouterActionState state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling getCloudRouterActionsByUuid(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling getCloudRouterActionsByUuid(Async)");
        }

        return getCloudRouterActionsByUuidCall(routerId, actionId, state, _callback);

    }

    /**
     * Get Route Table Action by ID
     * This API provides capability to fetch action status
     * @param routerId Router UUID (required)
     * @param actionId Action UUID (required)
     * @param state Action state (optional)
     * @return CloudRouterActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterActionResponse getCloudRouterActionsByUuid(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID actionId, @javax.annotation.Nullable CloudRouterActionState state) throws ApiException {
        ApiResponse<CloudRouterActionResponse> localVarResp = getCloudRouterActionsByUuidWithHttpInfo(routerId, actionId, state);
        return localVarResp.getData();
    }

    /**
     * Get Route Table Action by ID
     * This API provides capability to fetch action status
     * @param routerId Router UUID (required)
     * @param actionId Action UUID (required)
     * @param state Action state (optional)
     * @return ApiResponse&lt;CloudRouterActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterActionResponse> getCloudRouterActionsByUuidWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID actionId, @javax.annotation.Nullable CloudRouterActionState state) throws ApiException {
        okhttp3.Call localVarCall = getCloudRouterActionsByUuidValidateBeforeCall(routerId, actionId, state, null);
        Type localVarReturnType = new TypeToken<CloudRouterActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Route Table Action by ID (asynchronously)
     * This API provides capability to fetch action status
     * @param routerId Router UUID (required)
     * @param actionId Action UUID (required)
     * @param state Action state (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterActionsByUuidAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID actionId, @javax.annotation.Nullable CloudRouterActionState state, final ApiCallback<CloudRouterActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudRouterActionsByUuidValidateBeforeCall(routerId, actionId, state, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudRouterByUuid
     * @param routerId Cloud Router UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterByUuidCall(@javax.annotation.Nonnull UUID routerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudRouterByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling getCloudRouterByUuid(Async)");
        }

        return getCloudRouterByUuidCall(routerId, _callback);

    }

    /**
     * Get Routers
     * This API provides capability to retrieve user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @return CloudRouter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouter getCloudRouterByUuid(@javax.annotation.Nonnull UUID routerId) throws ApiException {
        ApiResponse<CloudRouter> localVarResp = getCloudRouterByUuidWithHttpInfo(routerId);
        return localVarResp.getData();
    }

    /**
     * Get Routers
     * This API provides capability to retrieve user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @return ApiResponse&lt;CloudRouter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouter> getCloudRouterByUuidWithHttpInfo(@javax.annotation.Nonnull UUID routerId) throws ApiException {
        okhttp3.Call localVarCall = getCloudRouterByUuidValidateBeforeCall(routerId, null);
        Type localVarReturnType = new TypeToken<CloudRouter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Routers (asynchronously)
     * This API provides capability to retrieve user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterByUuidAsync(@javax.annotation.Nonnull UUID routerId, final ApiCallback<CloudRouter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudRouterByUuidValidateBeforeCall(routerId, _callback);
        Type localVarReturnType = new TypeToken<CloudRouter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudRouterCommand
     * @param routerId Router UUID (required)
     * @param commandId Command UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterCommandCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/commands/{commandId}"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()))
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudRouterCommandValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling getCloudRouterCommand(Async)");
        }

        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getCloudRouterCommand(Async)");
        }

        return getCloudRouterCommandCall(routerId, commandId, _callback);

    }

    /**
     * Get Command
     * This API provides capability to fetch command using command Id
     * @param routerId Router UUID (required)
     * @param commandId Command UUID (required)
     * @return CloudRouterCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterCommand getCloudRouterCommand(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId) throws ApiException {
        ApiResponse<CloudRouterCommand> localVarResp = getCloudRouterCommandWithHttpInfo(routerId, commandId);
        return localVarResp.getData();
    }

    /**
     * Get Command
     * This API provides capability to fetch command using command Id
     * @param routerId Router UUID (required)
     * @param commandId Command UUID (required)
     * @return ApiResponse&lt;CloudRouterCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterCommand> getCloudRouterCommandWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId) throws ApiException {
        okhttp3.Call localVarCall = getCloudRouterCommandValidateBeforeCall(routerId, commandId, null);
        Type localVarReturnType = new TypeToken<CloudRouterCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Command (asynchronously)
     * This API provides capability to fetch command using command Id
     * @param routerId Router UUID (required)
     * @param commandId Command UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterCommandAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull UUID commandId, final ApiCallback<CloudRouterCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudRouterCommandValidateBeforeCall(routerId, commandId, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudRouterPackageByCode
     * @param routerPackageCode Equinix-assigned Cloud Router package identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router Package details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterPackageByCodeCall(@javax.annotation.Nonnull RouterPackageCode routerPackageCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routerPackages/{routerPackageCode}"
            .replace("{" + "routerPackageCode" + "}", localVarApiClient.escapeString(routerPackageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudRouterPackageByCodeValidateBeforeCall(@javax.annotation.Nonnull RouterPackageCode routerPackageCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerPackageCode' is set
        if (routerPackageCode == null) {
            throw new ApiException("Missing the required parameter 'routerPackageCode' when calling getCloudRouterPackageByCode(Async)");
        }

        return getCloudRouterPackageByCodeCall(routerPackageCode, _callback);

    }

    /**
     * Get Package Details
     * This API provides capability to retrieve user&#39;s Cloud Routers Package Details
     * @param routerPackageCode Equinix-assigned Cloud Router package identifier (required)
     * @return CloudRouterPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router Package details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterPackage getCloudRouterPackageByCode(@javax.annotation.Nonnull RouterPackageCode routerPackageCode) throws ApiException {
        ApiResponse<CloudRouterPackage> localVarResp = getCloudRouterPackageByCodeWithHttpInfo(routerPackageCode);
        return localVarResp.getData();
    }

    /**
     * Get Package Details
     * This API provides capability to retrieve user&#39;s Cloud Routers Package Details
     * @param routerPackageCode Equinix-assigned Cloud Router package identifier (required)
     * @return ApiResponse&lt;CloudRouterPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router Package details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterPackage> getCloudRouterPackageByCodeWithHttpInfo(@javax.annotation.Nonnull RouterPackageCode routerPackageCode) throws ApiException {
        okhttp3.Call localVarCall = getCloudRouterPackageByCodeValidateBeforeCall(routerPackageCode, null);
        Type localVarReturnType = new TypeToken<CloudRouterPackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Package Details (asynchronously)
     * This API provides capability to retrieve user&#39;s Cloud Routers Package Details
     * @param routerPackageCode Equinix-assigned Cloud Router package identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router Package details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterPackageByCodeAsync(@javax.annotation.Nonnull RouterPackageCode routerPackageCode, final ApiCallback<CloudRouterPackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudRouterPackageByCodeValidateBeforeCall(routerPackageCode, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterPackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudRouterPackages
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router Packages </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterPackagesCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routerPackages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudRouterPackagesValidateBeforeCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return getCloudRouterPackagesCall(offset, limit, _callback);

    }

    /**
     * List Packages
     * This API provides capability to retrieve user&#39;s Cloud Routers Packages
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return PackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router Packages </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PackageResponse getCloudRouterPackages(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<PackageResponse> localVarResp = getCloudRouterPackagesWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Packages
     * This API provides capability to retrieve user&#39;s Cloud Routers Packages
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;PackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router Packages </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageResponse> getCloudRouterPackagesWithHttpInfo(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getCloudRouterPackagesValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Packages (asynchronously)
     * This API provides capability to retrieve user&#39;s Cloud Routers Packages
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router Packages </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudRouterPackagesAsync(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<PackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudRouterPackagesValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGatewayAttachmentToCloudRouterByUuid
     * @param gatewayId Gateway UUID (required)
     * @param routerId Cloud Router UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cloud Router associated to a Gateway Attachment. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGatewayAttachmentToCloudRouterByUuidCall(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nonnull UUID routerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/gateways/{gatewayId}/routers/{routerId}"
            .replace("{" + "gatewayId" + "}", localVarApiClient.escapeString(gatewayId.toString()))
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGatewayAttachmentToCloudRouterByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nonnull UUID routerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling getGatewayAttachmentToCloudRouterByUuid(Async)");
        }

        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling getGatewayAttachmentToCloudRouterByUuid(Async)");
        }

        return getGatewayAttachmentToCloudRouterByUuidCall(gatewayId, routerId, _callback);

    }

    /**
     * Get Gateway Attachment details to a Cloud Router
     * Get details of a Specific Gateway Attachment to a Cloud Router.
     * @param gatewayId Gateway UUID (required)
     * @param routerId Cloud Router UUID (required)
     * @return CloudRouterForGatewayAttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cloud Router associated to a Gateway Attachment. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterForGatewayAttachmentResponse getGatewayAttachmentToCloudRouterByUuid(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nonnull UUID routerId) throws ApiException {
        ApiResponse<CloudRouterForGatewayAttachmentResponse> localVarResp = getGatewayAttachmentToCloudRouterByUuidWithHttpInfo(gatewayId, routerId);
        return localVarResp.getData();
    }

    /**
     * Get Gateway Attachment details to a Cloud Router
     * Get details of a Specific Gateway Attachment to a Cloud Router.
     * @param gatewayId Gateway UUID (required)
     * @param routerId Cloud Router UUID (required)
     * @return ApiResponse&lt;CloudRouterForGatewayAttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cloud Router associated to a Gateway Attachment. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterForGatewayAttachmentResponse> getGatewayAttachmentToCloudRouterByUuidWithHttpInfo(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nonnull UUID routerId) throws ApiException {
        okhttp3.Call localVarCall = getGatewayAttachmentToCloudRouterByUuidValidateBeforeCall(gatewayId, routerId, null);
        Type localVarReturnType = new TypeToken<CloudRouterForGatewayAttachmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Gateway Attachment details to a Cloud Router (asynchronously)
     * Get details of a Specific Gateway Attachment to a Cloud Router.
     * @param gatewayId Gateway UUID (required)
     * @param routerId Cloud Router UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cloud Router associated to a Gateway Attachment. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGatewayAttachmentToCloudRouterByUuidAsync(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nonnull UUID routerId, final ApiCallback<CloudRouterForGatewayAttachmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGatewayAttachmentToCloudRouterByUuidValidateBeforeCall(gatewayId, routerId, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterForGatewayAttachmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGatewayAttachmentsToCloudRouter
     * @param gatewayId Gateway UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Cloud Routers on a Gateway Attachment. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGatewayAttachmentsToCloudRouterCall(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/gateways/{gatewayId}/routers"
            .replace("{" + "gatewayId" + "}", localVarApiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGatewayAttachmentsToCloudRouterValidateBeforeCall(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling listGatewayAttachmentsToCloudRouter(Async)");
        }

        return listGatewayAttachmentsToCloudRouterCall(gatewayId, offset, limit, _callback);

    }

    /**
     * List Cloud Routers of a Gateway Attachment.
     * Get all Cloud Routers attached on a Gateway.
     * @param gatewayId Gateway UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return CloudRouterListForGatewayAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Cloud Routers on a Gateway Attachment. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterListForGatewayAttachment listGatewayAttachmentsToCloudRouter(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<CloudRouterListForGatewayAttachment> localVarResp = listGatewayAttachmentsToCloudRouterWithHttpInfo(gatewayId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Cloud Routers of a Gateway Attachment.
     * Get all Cloud Routers attached on a Gateway.
     * @param gatewayId Gateway UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;CloudRouterListForGatewayAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Cloud Routers on a Gateway Attachment. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterListForGatewayAttachment> listGatewayAttachmentsToCloudRouterWithHttpInfo(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listGatewayAttachmentsToCloudRouterValidateBeforeCall(gatewayId, offset, limit, null);
        Type localVarReturnType = new TypeToken<CloudRouterListForGatewayAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Cloud Routers of a Gateway Attachment. (asynchronously)
     * Get all Cloud Routers attached on a Gateway.
     * @param gatewayId Gateway UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Cloud Routers on a Gateway Attachment. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGatewayAttachmentsToCloudRouterAsync(@javax.annotation.Nonnull UUID gatewayId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<CloudRouterListForGatewayAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGatewayAttachmentsToCloudRouterValidateBeforeCall(gatewayId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterListForGatewayAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCloudRouterCommands
     * @param routerId Router UUID (required)
     * @param cloudRouterCommandSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCloudRouterCommandsCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandSearchRequest cloudRouterCommandSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRouterCommandSearchRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/commands/search"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCloudRouterCommandsValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandSearchRequest cloudRouterCommandSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling searchCloudRouterCommands(Async)");
        }

        // verify the required parameter 'cloudRouterCommandSearchRequest' is set
        if (cloudRouterCommandSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'cloudRouterCommandSearchRequest' when calling searchCloudRouterCommands(Async)");
        }

        return searchCloudRouterCommandsCall(routerId, cloudRouterCommandSearchRequest, _callback);

    }

    /**
     * Search Commands
     * This API provides capability to search commands
     * @param routerId Router UUID (required)
     * @param cloudRouterCommandSearchRequest  (required)
     * @return CloudRouterCommandSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterCommandSearchResponse searchCloudRouterCommands(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandSearchRequest cloudRouterCommandSearchRequest) throws ApiException {
        ApiResponse<CloudRouterCommandSearchResponse> localVarResp = searchCloudRouterCommandsWithHttpInfo(routerId, cloudRouterCommandSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search Commands
     * This API provides capability to search commands
     * @param routerId Router UUID (required)
     * @param cloudRouterCommandSearchRequest  (required)
     * @return ApiResponse&lt;CloudRouterCommandSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterCommandSearchResponse> searchCloudRouterCommandsWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandSearchRequest cloudRouterCommandSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchCloudRouterCommandsValidateBeforeCall(routerId, cloudRouterCommandSearchRequest, null);
        Type localVarReturnType = new TypeToken<CloudRouterCommandSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Commands (asynchronously)
     * This API provides capability to search commands
     * @param routerId Router UUID (required)
     * @param cloudRouterCommandSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCloudRouterCommandsAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterCommandSearchRequest cloudRouterCommandSearchRequest, final ApiCallback<CloudRouterCommandSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCloudRouterCommandsValidateBeforeCall(routerId, cloudRouterCommandSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterCommandSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCloudRouterRoutes
     * @param routerId Router UUID (required)
     * @param routeTableEntrySearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCloudRouterRoutesCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull RouteTableEntrySearchRequest routeTableEntrySearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeTableEntrySearchRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/routes/search"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCloudRouterRoutesValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull RouteTableEntrySearchRequest routeTableEntrySearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling searchCloudRouterRoutes(Async)");
        }

        // verify the required parameter 'routeTableEntrySearchRequest' is set
        if (routeTableEntrySearchRequest == null) {
            throw new ApiException("Missing the required parameter 'routeTableEntrySearchRequest' when calling searchCloudRouterRoutes(Async)");
        }

        return searchCloudRouterRoutesCall(routerId, routeTableEntrySearchRequest, _callback);

    }

    /**
     * Search Route Table
     * The API provides capability to get list of user&#39;s Fabric Cloud Router route table entries using search criteria, including optional filtering, pagination and sorting
     * @param routerId Router UUID (required)
     * @param routeTableEntrySearchRequest  (required)
     * @return RouteTableEntrySearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteTableEntrySearchResponse searchCloudRouterRoutes(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull RouteTableEntrySearchRequest routeTableEntrySearchRequest) throws ApiException {
        ApiResponse<RouteTableEntrySearchResponse> localVarResp = searchCloudRouterRoutesWithHttpInfo(routerId, routeTableEntrySearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search Route Table
     * The API provides capability to get list of user&#39;s Fabric Cloud Router route table entries using search criteria, including optional filtering, pagination and sorting
     * @param routerId Router UUID (required)
     * @param routeTableEntrySearchRequest  (required)
     * @return ApiResponse&lt;RouteTableEntrySearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteTableEntrySearchResponse> searchCloudRouterRoutesWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull RouteTableEntrySearchRequest routeTableEntrySearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchCloudRouterRoutesValidateBeforeCall(routerId, routeTableEntrySearchRequest, null);
        Type localVarReturnType = new TypeToken<RouteTableEntrySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Route Table (asynchronously)
     * The API provides capability to get list of user&#39;s Fabric Cloud Router route table entries using search criteria, including optional filtering, pagination and sorting
     * @param routerId Router UUID (required)
     * @param routeTableEntrySearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCloudRouterRoutesAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull RouteTableEntrySearchRequest routeTableEntrySearchRequest, final ApiCallback<RouteTableEntrySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCloudRouterRoutesValidateBeforeCall(routerId, routeTableEntrySearchRequest, _callback);
        Type localVarReturnType = new TypeToken<RouteTableEntrySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCloudRouters
     * @param cloudRouterSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCloudRoutersCall(@javax.annotation.Nonnull CloudRouterSearchRequest cloudRouterSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRouterSearchRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCloudRoutersValidateBeforeCall(@javax.annotation.Nonnull CloudRouterSearchRequest cloudRouterSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cloudRouterSearchRequest' is set
        if (cloudRouterSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'cloudRouterSearchRequest' when calling searchCloudRouters(Async)");
        }

        return searchCloudRoutersCall(cloudRouterSearchRequest, _callback);

    }

    /**
     * Search Routers
     * The API provides capability to get list of user&#39;s Cloud Routers using search criteria, including optional filtering, pagination and sorting
     * @param cloudRouterSearchRequest  (required)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse searchCloudRouters(@javax.annotation.Nonnull CloudRouterSearchRequest cloudRouterSearchRequest) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = searchCloudRoutersWithHttpInfo(cloudRouterSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search Routers
     * The API provides capability to get list of user&#39;s Cloud Routers using search criteria, including optional filtering, pagination and sorting
     * @param cloudRouterSearchRequest  (required)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> searchCloudRoutersWithHttpInfo(@javax.annotation.Nonnull CloudRouterSearchRequest cloudRouterSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchCloudRoutersValidateBeforeCall(cloudRouterSearchRequest, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Routers (asynchronously)
     * The API provides capability to get list of user&#39;s Cloud Routers using search criteria, including optional filtering, pagination and sorting
     * @param cloudRouterSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCloudRoutersAsync(@javax.annotation.Nonnull CloudRouterSearchRequest cloudRouterSearchRequest, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCloudRoutersValidateBeforeCall(cloudRouterSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchConnectionAdvertisedRoutes
     * @param connectionId Connection Id (required)
     * @param connectionRouteSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchConnectionAdvertisedRoutesCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionRouteSearchRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/advertisedRoutes/search"
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchConnectionAdvertisedRoutesValidateBeforeCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling searchConnectionAdvertisedRoutes(Async)");
        }

        // verify the required parameter 'connectionRouteSearchRequest' is set
        if (connectionRouteSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionRouteSearchRequest' when calling searchConnectionAdvertisedRoutes(Async)");
        }

        return searchConnectionAdvertisedRoutesCall(connectionId, connectionRouteSearchRequest, _callback);

    }

    /**
     * Search Advertised Routes
     * The API provides capability to get list of user&#39;s advertised routes using search criteria, including optional filtering, pagination and sorting
     * @param connectionId Connection Id (required)
     * @param connectionRouteSearchRequest  (required)
     * @return ConnectionRouteTableEntrySearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionRouteTableEntrySearchResponse searchConnectionAdvertisedRoutes(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest) throws ApiException {
        ApiResponse<ConnectionRouteTableEntrySearchResponse> localVarResp = searchConnectionAdvertisedRoutesWithHttpInfo(connectionId, connectionRouteSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search Advertised Routes
     * The API provides capability to get list of user&#39;s advertised routes using search criteria, including optional filtering, pagination and sorting
     * @param connectionId Connection Id (required)
     * @param connectionRouteSearchRequest  (required)
     * @return ApiResponse&lt;ConnectionRouteTableEntrySearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionRouteTableEntrySearchResponse> searchConnectionAdvertisedRoutesWithHttpInfo(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchConnectionAdvertisedRoutesValidateBeforeCall(connectionId, connectionRouteSearchRequest, null);
        Type localVarReturnType = new TypeToken<ConnectionRouteTableEntrySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Advertised Routes (asynchronously)
     * The API provides capability to get list of user&#39;s advertised routes using search criteria, including optional filtering, pagination and sorting
     * @param connectionId Connection Id (required)
     * @param connectionRouteSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchConnectionAdvertisedRoutesAsync(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest, final ApiCallback<ConnectionRouteTableEntrySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchConnectionAdvertisedRoutesValidateBeforeCall(connectionId, connectionRouteSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<ConnectionRouteTableEntrySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchConnectionReceivedRoutes
     * @param connectionId Connection Id (required)
     * @param connectionRouteSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchConnectionReceivedRoutesCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionRouteSearchRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/receivedRoutes/search"
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchConnectionReceivedRoutesValidateBeforeCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling searchConnectionReceivedRoutes(Async)");
        }

        // verify the required parameter 'connectionRouteSearchRequest' is set
        if (connectionRouteSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionRouteSearchRequest' when calling searchConnectionReceivedRoutes(Async)");
        }

        return searchConnectionReceivedRoutesCall(connectionId, connectionRouteSearchRequest, _callback);

    }

    /**
     * Search Received Routes
     * The API provides capability to get list of received routes using search criteria, including optional filtering, pagination and sorting
     * @param connectionId Connection Id (required)
     * @param connectionRouteSearchRequest  (required)
     * @return ConnectionRouteTableEntrySearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionRouteTableEntrySearchResponse searchConnectionReceivedRoutes(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest) throws ApiException {
        ApiResponse<ConnectionRouteTableEntrySearchResponse> localVarResp = searchConnectionReceivedRoutesWithHttpInfo(connectionId, connectionRouteSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search Received Routes
     * The API provides capability to get list of received routes using search criteria, including optional filtering, pagination and sorting
     * @param connectionId Connection Id (required)
     * @param connectionRouteSearchRequest  (required)
     * @return ApiResponse&lt;ConnectionRouteTableEntrySearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionRouteTableEntrySearchResponse> searchConnectionReceivedRoutesWithHttpInfo(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchConnectionReceivedRoutesValidateBeforeCall(connectionId, connectionRouteSearchRequest, null);
        Type localVarReturnType = new TypeToken<ConnectionRouteTableEntrySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Received Routes (asynchronously)
     * The API provides capability to get list of received routes using search criteria, including optional filtering, pagination and sorting
     * @param connectionId Connection Id (required)
     * @param connectionRouteSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchConnectionReceivedRoutesAsync(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull ConnectionRouteSearchRequest connectionRouteSearchRequest, final ApiCallback<ConnectionRouteTableEntrySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchConnectionReceivedRoutesValidateBeforeCall(connectionId, connectionRouteSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<ConnectionRouteTableEntrySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRouterActions
     * @param routerId Router UUID (required)
     * @param cloudRouterActionsSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRouterActionsCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionsSearchRequest cloudRouterActionsSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRouterActionsSearchRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}/actions/search"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRouterActionsValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionsSearchRequest cloudRouterActionsSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling searchRouterActions(Async)");
        }

        // verify the required parameter 'cloudRouterActionsSearchRequest' is set
        if (cloudRouterActionsSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'cloudRouterActionsSearchRequest' when calling searchRouterActions(Async)");
        }

        return searchRouterActionsCall(routerId, cloudRouterActionsSearchRequest, _callback);

    }

    /**
     * Search Route Table Actions
     * This API provides capability to refresh route table and bgp session summary information
     * @param routerId Router UUID (required)
     * @param cloudRouterActionsSearchRequest  (required)
     * @return CloudRouterActionsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouterActionsSearchResponse searchRouterActions(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionsSearchRequest cloudRouterActionsSearchRequest) throws ApiException {
        ApiResponse<CloudRouterActionsSearchResponse> localVarResp = searchRouterActionsWithHttpInfo(routerId, cloudRouterActionsSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search Route Table Actions
     * This API provides capability to refresh route table and bgp session summary information
     * @param routerId Router UUID (required)
     * @param cloudRouterActionsSearchRequest  (required)
     * @return ApiResponse&lt;CloudRouterActionsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouterActionsSearchResponse> searchRouterActionsWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionsSearchRequest cloudRouterActionsSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchRouterActionsValidateBeforeCall(routerId, cloudRouterActionsSearchRequest, null);
        Type localVarReturnType = new TypeToken<CloudRouterActionsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Route Table Actions (asynchronously)
     * This API provides capability to refresh route table and bgp session summary information
     * @param routerId Router UUID (required)
     * @param cloudRouterActionsSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRouterActionsAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull CloudRouterActionsSearchRequest cloudRouterActionsSearchRequest, final ApiCallback<CloudRouterActionsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRouterActionsValidateBeforeCall(routerId, cloudRouterActionsSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<CloudRouterActionsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCloudRouterByUuid
     * @param routerId Cloud Router UUID (required)
     * @param cloudRouterChangeOperation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudRouterByUuidCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull List<CloudRouterChangeOperation> cloudRouterChangeOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRouterChangeOperation;

        // create path and map variables
        String localVarPath = "/fabric/v4/routers/{routerId}"
            .replace("{" + "routerId" + "}", localVarApiClient.escapeString(routerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCloudRouterByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull List<CloudRouterChangeOperation> cloudRouterChangeOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routerId' is set
        if (routerId == null) {
            throw new ApiException("Missing the required parameter 'routerId' when calling updateCloudRouterByUuid(Async)");
        }

        // verify the required parameter 'cloudRouterChangeOperation' is set
        if (cloudRouterChangeOperation == null) {
            throw new ApiException("Missing the required parameter 'cloudRouterChangeOperation' when calling updateCloudRouterByUuid(Async)");
        }

        return updateCloudRouterByUuidCall(routerId, cloudRouterChangeOperation, _callback);

    }

    /**
     * Update Routers
     * This API provides capability to update user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @param cloudRouterChangeOperation  (required)
     * @return CloudRouter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CloudRouter updateCloudRouterByUuid(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull List<CloudRouterChangeOperation> cloudRouterChangeOperation) throws ApiException {
        ApiResponse<CloudRouter> localVarResp = updateCloudRouterByUuidWithHttpInfo(routerId, cloudRouterChangeOperation);
        return localVarResp.getData();
    }

    /**
     * Update Routers
     * This API provides capability to update user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @param cloudRouterChangeOperation  (required)
     * @return ApiResponse&lt;CloudRouter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRouter> updateCloudRouterByUuidWithHttpInfo(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull List<CloudRouterChangeOperation> cloudRouterChangeOperation) throws ApiException {
        okhttp3.Call localVarCall = updateCloudRouterByUuidValidateBeforeCall(routerId, cloudRouterChangeOperation, null);
        Type localVarReturnType = new TypeToken<CloudRouter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Routers (asynchronously)
     * This API provides capability to update user&#39;s Cloud Routers
     * @param routerId Cloud Router UUID (required)
     * @param cloudRouterChangeOperation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Cloud Router object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudRouterByUuidAsync(@javax.annotation.Nonnull UUID routerId, @javax.annotation.Nonnull List<CloudRouterChangeOperation> cloudRouterChangeOperation, final ApiCallback<CloudRouter> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCloudRouterByUuidValidateBeforeCall(routerId, cloudRouterChangeOperation, _callback);
        Type localVarReturnType = new TypeToken<CloudRouter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
