/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import java.util.Locale;
import com.equinix.sdk.fabricv4.model.Changelog;
import com.equinix.sdk.fabricv4.model.PeeringConnectionResIpv4;
import com.equinix.sdk.fabricv4.model.PeeringConnectionResIpv6;
import com.equinix.sdk.fabricv4.model.PeeringProtocolDataRouteCollectors;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.equinix.sdk.fabricv4.JSON;

/**
 * PeeringProtocolData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class PeeringProtocolData {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  @javax.annotation.Nullable
  private String href;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  @javax.annotation.Nullable
  private UUID uuid;

  /**
   * Peering Protocol Type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BGP("BGP");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_CUSTOMER_ASN = "customerAsn";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ASN)
  @javax.annotation.Nullable
  private Long customerAsn;

  public static final String SERIALIZED_NAME_EQUINIX_ASN = "equinixAsn";
  @SerializedName(SERIALIZED_NAME_EQUINIX_ASN)
  @javax.annotation.Nullable
  private Long equinixAsn;

  /**
   * Protocol State
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PROVISIONED("PROVISIONED"),
    
    DEPROVISIONED("DEPROVISIONED"),
    
    PROVISIONING("PROVISIONING"),
    
    DEPROVISIONING("DEPROVISIONING"),
    
    REPROVISIONING("REPROVISIONING"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private StateEnum state;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "macAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  @javax.annotation.Nullable
  private String macAddress;

  public static final String SERIALIZED_NAME_BGP_IPV4 = "bgpIpv4";
  @SerializedName(SERIALIZED_NAME_BGP_IPV4)
  @javax.annotation.Nullable
  private PeeringConnectionResIpv4 bgpIpv4;

  public static final String SERIALIZED_NAME_BGP_IPV6 = "bgpIpv6";
  @SerializedName(SERIALIZED_NAME_BGP_IPV6)
  @javax.annotation.Nullable
  private PeeringConnectionResIpv6 bgpIpv6;

  public static final String SERIALIZED_NAME_ROUTE_COLLECTORS = "routeCollectors";
  @SerializedName(SERIALIZED_NAME_ROUTE_COLLECTORS)
  @javax.annotation.Nullable
  private PeeringProtocolDataRouteCollectors routeCollectors;

  public static final String SERIALIZED_NAME_CHANGELOG = "changelog";
  @SerializedName(SERIALIZED_NAME_CHANGELOG)
  @javax.annotation.Nullable
  private Changelog changelog;

  public PeeringProtocolData() {
  }

  public PeeringProtocolData href(@javax.annotation.Nullable String href) {
    this.href = href;
    return this;
  }

  /**
   * Peering Protocol URI
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(@javax.annotation.Nullable String href) {
    this.href = href;
  }


  public PeeringProtocolData uuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Peering protocol identifier
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
  }


  public PeeringProtocolData type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Peering Protocol Type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public PeeringProtocolData name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Protocol Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public PeeringProtocolData description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Protocol Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public PeeringProtocolData customerAsn(@javax.annotation.Nullable Long customerAsn) {
    this.customerAsn = customerAsn;
    return this;
  }

  /**
   * Customer ASN
   * @return customerAsn
   */
  @javax.annotation.Nullable
  public Long getCustomerAsn() {
    return customerAsn;
  }

  public void setCustomerAsn(@javax.annotation.Nullable Long customerAsn) {
    this.customerAsn = customerAsn;
  }


  public PeeringProtocolData equinixAsn(@javax.annotation.Nullable Long equinixAsn) {
    this.equinixAsn = equinixAsn;
    return this;
  }

  /**
   * Equinix ASN
   * @return equinixAsn
   */
  @javax.annotation.Nullable
  public Long getEquinixAsn() {
    return equinixAsn;
  }

  public void setEquinixAsn(@javax.annotation.Nullable Long equinixAsn) {
    this.equinixAsn = equinixAsn;
  }


  public PeeringProtocolData state(@javax.annotation.Nullable StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Protocol State
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable StateEnum state) {
    this.state = state;
  }


  public PeeringProtocolData macAddress(@javax.annotation.Nullable String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * MAC Address of The Peering Protocol
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(@javax.annotation.Nullable String macAddress) {
    this.macAddress = macAddress;
  }


  public PeeringProtocolData bgpIpv4(@javax.annotation.Nullable PeeringConnectionResIpv4 bgpIpv4) {
    this.bgpIpv4 = bgpIpv4;
    return this;
  }

  /**
   * Get bgpIpv4
   * @return bgpIpv4
   */
  @javax.annotation.Nullable
  public PeeringConnectionResIpv4 getBgpIpv4() {
    return bgpIpv4;
  }

  public void setBgpIpv4(@javax.annotation.Nullable PeeringConnectionResIpv4 bgpIpv4) {
    this.bgpIpv4 = bgpIpv4;
  }


  public PeeringProtocolData bgpIpv6(@javax.annotation.Nullable PeeringConnectionResIpv6 bgpIpv6) {
    this.bgpIpv6 = bgpIpv6;
    return this;
  }

  /**
   * Get bgpIpv6
   * @return bgpIpv6
   */
  @javax.annotation.Nullable
  public PeeringConnectionResIpv6 getBgpIpv6() {
    return bgpIpv6;
  }

  public void setBgpIpv6(@javax.annotation.Nullable PeeringConnectionResIpv6 bgpIpv6) {
    this.bgpIpv6 = bgpIpv6;
  }


  public PeeringProtocolData routeCollectors(@javax.annotation.Nullable PeeringProtocolDataRouteCollectors routeCollectors) {
    this.routeCollectors = routeCollectors;
    return this;
  }

  /**
   * Get routeCollectors
   * @return routeCollectors
   */
  @javax.annotation.Nullable
  public PeeringProtocolDataRouteCollectors getRouteCollectors() {
    return routeCollectors;
  }

  public void setRouteCollectors(@javax.annotation.Nullable PeeringProtocolDataRouteCollectors routeCollectors) {
    this.routeCollectors = routeCollectors;
  }


  public PeeringProtocolData changelog(@javax.annotation.Nullable Changelog changelog) {
    this.changelog = changelog;
    return this;
  }

  /**
   * Get changelog
   * @return changelog
   */
  @javax.annotation.Nullable
  public Changelog getChangelog() {
    return changelog;
  }

  public void setChangelog(@javax.annotation.Nullable Changelog changelog) {
    this.changelog = changelog;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PeeringProtocolData instance itself
   */
  public PeeringProtocolData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeeringProtocolData peeringProtocolData = (PeeringProtocolData) o;
    return Objects.equals(this.href, peeringProtocolData.href) &&
        Objects.equals(this.uuid, peeringProtocolData.uuid) &&
        Objects.equals(this.type, peeringProtocolData.type) &&
        Objects.equals(this.name, peeringProtocolData.name) &&
        Objects.equals(this.description, peeringProtocolData.description) &&
        Objects.equals(this.customerAsn, peeringProtocolData.customerAsn) &&
        Objects.equals(this.equinixAsn, peeringProtocolData.equinixAsn) &&
        Objects.equals(this.state, peeringProtocolData.state) &&
        Objects.equals(this.macAddress, peeringProtocolData.macAddress) &&
        Objects.equals(this.bgpIpv4, peeringProtocolData.bgpIpv4) &&
        Objects.equals(this.bgpIpv6, peeringProtocolData.bgpIpv6) &&
        Objects.equals(this.routeCollectors, peeringProtocolData.routeCollectors) &&
        Objects.equals(this.changelog, peeringProtocolData.changelog)&&
        Objects.equals(this.additionalProperties, peeringProtocolData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, uuid, type, name, description, customerAsn, equinixAsn, state, macAddress, bgpIpv4, bgpIpv6, routeCollectors, changelog, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeeringProtocolData {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    customerAsn: ").append(toIndentedString(customerAsn)).append("\n");
    sb.append("    equinixAsn: ").append(toIndentedString(equinixAsn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    bgpIpv4: ").append(toIndentedString(bgpIpv4)).append("\n");
    sb.append("    bgpIpv6: ").append(toIndentedString(bgpIpv6)).append("\n");
    sb.append("    routeCollectors: ").append(toIndentedString(routeCollectors)).append("\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("href", "uuid", "type", "name", "description", "customerAsn", "equinixAsn", "state", "macAddress", "bgpIpv4", "bgpIpv6", "routeCollectors", "changelog"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeeringProtocolData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeeringProtocolData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PeeringProtocolData is not found in the empty JSON string", PeeringProtocolData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("macAddress") != null && !jsonObj.get("macAddress").isJsonNull()) && !jsonObj.get("macAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `macAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macAddress").toString()));
      }
      // validate the optional field `bgpIpv4`
      if (jsonObj.get("bgpIpv4") != null && !jsonObj.get("bgpIpv4").isJsonNull()) {
        PeeringConnectionResIpv4.validateJsonElement(jsonObj.get("bgpIpv4"));
      }
      // validate the optional field `bgpIpv6`
      if (jsonObj.get("bgpIpv6") != null && !jsonObj.get("bgpIpv6").isJsonNull()) {
        PeeringConnectionResIpv6.validateJsonElement(jsonObj.get("bgpIpv6"));
      }
      // validate the optional field `routeCollectors`
      if (jsonObj.get("routeCollectors") != null && !jsonObj.get("routeCollectors").isJsonNull()) {
        PeeringProtocolDataRouteCollectors.validateJsonElement(jsonObj.get("routeCollectors"));
      }
      // validate the optional field `changelog`
      if (jsonObj.get("changelog") != null && !jsonObj.get("changelog").isJsonNull()) {
        Changelog.validateJsonElement(jsonObj.get("changelog"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeeringProtocolData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeeringProtocolData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeeringProtocolData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeeringProtocolData.class));

       return (TypeAdapter<T>) new TypeAdapter<PeeringProtocolData>() {
           @Override
           public void write(JsonWriter out, PeeringProtocolData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PeeringProtocolData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PeeringProtocolData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeeringProtocolData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeeringProtocolData
   * @throws IOException if the JSON string is invalid with respect to PeeringProtocolData
   */
  public static PeeringProtocolData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeeringProtocolData.class);
  }

  /**
   * Convert an instance of PeeringProtocolData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

