/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import com.equinix.sdk.fabricv4.model.CloudRouterPostRequestPackage;
import com.equinix.sdk.fabricv4.model.ConnectionRedundancy;
import com.equinix.sdk.fabricv4.model.ConnectionSide;
import com.equinix.sdk.fabricv4.model.FabricBGPConnectionIpv4;
import com.equinix.sdk.fabricv4.model.FabricConnection;
import com.equinix.sdk.fabricv4.model.FabricIPWAN;
import com.equinix.sdk.fabricv4.model.FabricIPWANConnection;
import com.equinix.sdk.fabricv4.model.FabricRouteProtocols;
import com.equinix.sdk.fabricv4.model.FabricRouter;
import com.equinix.sdk.fabricv4.model.NetworkScope;
import com.equinix.sdk.fabricv4.model.SimplifiedLocation;
import com.equinix.sdk.fabricv4.model.TopologyProperties;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.equinix.sdk.fabricv4.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class FabricProviderResource extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(FabricProviderResource.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FabricProviderResource.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FabricProviderResource' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FabricRouter> adapterFabricRouter = gson.getDelegateAdapter(this, TypeToken.get(FabricRouter.class));
            final TypeAdapter<FabricConnection> adapterFabricConnection = gson.getDelegateAdapter(this, TypeToken.get(FabricConnection.class));
            final TypeAdapter<FabricRouteProtocols> adapterFabricRouteProtocols = gson.getDelegateAdapter(this, TypeToken.get(FabricRouteProtocols.class));
            final TypeAdapter<FabricIPWAN> adapterFabricIPWAN = gson.getDelegateAdapter(this, TypeToken.get(FabricIPWAN.class));
            final TypeAdapter<FabricIPWANConnection> adapterFabricIPWANConnection = gson.getDelegateAdapter(this, TypeToken.get(FabricIPWANConnection.class));

            return (TypeAdapter<T>) new TypeAdapter<FabricProviderResource>() {
                @Override
                public void write(JsonWriter out, FabricProviderResource value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `FabricRouter`
                    if (value.getActualInstance() instanceof FabricRouter) {
                        JsonElement element = adapterFabricRouter.toJsonTree((FabricRouter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FabricConnection`
                    if (value.getActualInstance() instanceof FabricConnection) {
                        JsonElement element = adapterFabricConnection.toJsonTree((FabricConnection)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FabricRouteProtocols`
                    if (value.getActualInstance() instanceof FabricRouteProtocols) {
                        JsonElement element = adapterFabricRouteProtocols.toJsonTree((FabricRouteProtocols)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FabricIPWAN`
                    if (value.getActualInstance() instanceof FabricIPWAN) {
                        JsonElement element = adapterFabricIPWAN.toJsonTree((FabricIPWAN)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FabricIPWANConnection`
                    if (value.getActualInstance() instanceof FabricIPWANConnection) {
                        JsonElement element = adapterFabricIPWANConnection.toJsonTree((FabricIPWANConnection)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: FabricConnection, FabricIPWAN, FabricIPWANConnection, FabricRouteProtocols, FabricRouter");
                }

                @Override
                public FabricProviderResource read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize FabricRouter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricRouter.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricRouter;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricRouter'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FabricRouter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricRouter'", e);
                    }
                    // deserialize FabricConnection
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricConnection.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricConnection;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricConnection'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FabricConnection failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricConnection'", e);
                    }
                    // deserialize FabricRouteProtocols
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricRouteProtocols.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricRouteProtocols;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricRouteProtocols'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FabricRouteProtocols failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricRouteProtocols'", e);
                    }
                    // deserialize FabricIPWAN
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricIPWAN.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricIPWAN;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricIPWAN'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FabricIPWAN failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricIPWAN'", e);
                    }
                    // deserialize FabricIPWANConnection
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricIPWANConnection.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricIPWANConnection;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricIPWANConnection'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FabricIPWANConnection failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricIPWANConnection'", e);
                    }

                    if (match == 1) {
                        FabricProviderResource ret = new FabricProviderResource();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for FabricProviderResource: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public FabricProviderResource() {
        super("oneOf", Boolean.FALSE);
    }

    public FabricProviderResource(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("FabricRouter", FabricRouter.class);
        schemas.put("FabricConnection", FabricConnection.class);
        schemas.put("FabricRouteProtocols", FabricRouteProtocols.class);
        schemas.put("FabricIPWAN", FabricIPWAN.class);
        schemas.put("FabricIPWANConnection", FabricIPWANConnection.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return FabricProviderResource.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * FabricConnection, FabricIPWAN, FabricIPWANConnection, FabricRouteProtocols, FabricRouter
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof FabricRouter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FabricConnection) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FabricRouteProtocols) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FabricIPWAN) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FabricIPWANConnection) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be FabricConnection, FabricIPWAN, FabricIPWANConnection, FabricRouteProtocols, FabricRouter");
    }

    /**
     * Get the actual instance, which can be the following:
     * FabricConnection, FabricIPWAN, FabricIPWANConnection, FabricRouteProtocols, FabricRouter
     *
     * @return The actual instance (FabricConnection, FabricIPWAN, FabricIPWANConnection, FabricRouteProtocols, FabricRouter)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricRouter`. If the actual instance is not `FabricRouter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricRouter`
     * @throws ClassCastException if the instance is not `FabricRouter`
     */
    public FabricRouter getFabricRouter() throws ClassCastException {
        return (FabricRouter)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricConnection`. If the actual instance is not `FabricConnection`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricConnection`
     * @throws ClassCastException if the instance is not `FabricConnection`
     */
    public FabricConnection getFabricConnection() throws ClassCastException {
        return (FabricConnection)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricRouteProtocols`. If the actual instance is not `FabricRouteProtocols`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricRouteProtocols`
     * @throws ClassCastException if the instance is not `FabricRouteProtocols`
     */
    public FabricRouteProtocols getFabricRouteProtocols() throws ClassCastException {
        return (FabricRouteProtocols)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricIPWAN`. If the actual instance is not `FabricIPWAN`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricIPWAN`
     * @throws ClassCastException if the instance is not `FabricIPWAN`
     */
    public FabricIPWAN getFabricIPWAN() throws ClassCastException {
        return (FabricIPWAN)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricIPWANConnection`. If the actual instance is not `FabricIPWANConnection`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricIPWANConnection`
     * @throws ClassCastException if the instance is not `FabricIPWANConnection`
     */
    public FabricIPWANConnection getFabricIPWANConnection() throws ClassCastException {
        return (FabricIPWANConnection)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FabricProviderResource
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with FabricRouter
        try {
            FabricRouter.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FabricRouter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FabricConnection
        try {
            FabricConnection.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FabricConnection failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FabricRouteProtocols
        try {
            FabricRouteProtocols.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FabricRouteProtocols failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FabricIPWAN
        try {
            FabricIPWAN.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FabricIPWAN failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FabricIPWANConnection
        try {
            FabricIPWANConnection.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FabricIPWANConnection failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for FabricProviderResource with oneOf schemas: FabricConnection, FabricIPWAN, FabricIPWANConnection, FabricRouteProtocols, FabricRouter. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of FabricProviderResource given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FabricProviderResource
     * @throws IOException if the JSON string is invalid with respect to FabricProviderResource
     */
    public static FabricProviderResource fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FabricProviderResource.class);
    }

    /**
     * Convert an instance of FabricProviderResource to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

