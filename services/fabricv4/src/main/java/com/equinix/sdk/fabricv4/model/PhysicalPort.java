/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import java.util.Locale;
import com.equinix.sdk.fabricv4.model.PhysicalPortSettings;
import com.equinix.sdk.fabricv4.model.PhysicalPortType;
import com.equinix.sdk.fabricv4.model.PortAdditionalInfo;
import com.equinix.sdk.fabricv4.model.PortDemarcationPoint;
import com.equinix.sdk.fabricv4.model.PortInterface;
import com.equinix.sdk.fabricv4.model.PortLoa;
import com.equinix.sdk.fabricv4.model.PortNotification;
import com.equinix.sdk.fabricv4.model.PortOperation;
import com.equinix.sdk.fabricv4.model.PortOrder;
import com.equinix.sdk.fabricv4.model.PortState;
import com.equinix.sdk.fabricv4.model.PortTether;
import com.equinix.sdk.fabricv4.model.SimplifiedAccount;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.equinix.sdk.fabricv4.JSON;

/**
 * Physical Port specification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class PhysicalPort {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  @javax.annotation.Nullable
  private URI href;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private PhysicalPortType type;

  public static final String SERIALIZED_NAME_ID = "id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private PortState state;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private SimplifiedAccount account;

  public static final String SERIALIZED_NAME_INTERFACE_SPEED = "interfaceSpeed";
  @SerializedName(SERIALIZED_NAME_INTERFACE_SPEED)
  @javax.annotation.Nullable
  private Integer interfaceSpeed;

  public static final String SERIALIZED_NAME_INTERFACE_TYPE = "interfaceType";
  @SerializedName(SERIALIZED_NAME_INTERFACE_TYPE)
  @javax.annotation.Nullable
  private String interfaceType;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  @javax.annotation.Nullable
  private UUID uuid;

  public static final String SERIALIZED_NAME_TETHER = "tether";
  @SerializedName(SERIALIZED_NAME_TETHER)
  @javax.annotation.Nullable
  private PortTether tether;

  public static final String SERIALIZED_NAME_DEMARCATION_POINT = "demarcationPoint";
  @SerializedName(SERIALIZED_NAME_DEMARCATION_POINT)
  @javax.annotation.Nullable
  private PortDemarcationPoint demarcationPoint;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  @javax.annotation.Nullable
  private PhysicalPortSettings settings;

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  @javax.annotation.Nullable
  private PortInterface _interface;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  @javax.annotation.Nullable
  private List<PortNotification> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  @javax.annotation.Nullable
  private List<PortAdditionalInfo> additionalInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  @javax.annotation.Nullable
  private PortOrder order;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  @javax.annotation.Nullable
  private PortOperation operation;

  public static final String SERIALIZED_NAME_LOAS = "loas";
  @SerializedName(SERIALIZED_NAME_LOAS)
  @javax.annotation.Nullable
  private List<PortLoa> loas = new ArrayList<>();

  public PhysicalPort() {
  }

  public PhysicalPort(
     URI href
  ) {
    this();
    this.href = href;
  }

  /**
   * Equinix assigned response attribute for an absolute URL that is the subject of the link&#39;s context.
   * @return href
   */
  @javax.annotation.Nullable
  public URI getHref() {
    return href;
  }



  public PhysicalPort type(@javax.annotation.Nullable PhysicalPortType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public PhysicalPortType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable PhysicalPortType type) {
    this.type = type;
  }


  @Deprecated
  public PhysicalPort id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Equinix assigned response attribute for Physical Port Id
   * @return id
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  @Deprecated
  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public PhysicalPort state(@javax.annotation.Nullable PortState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public PortState getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable PortState state) {
    this.state = state;
  }


  public PhysicalPort account(@javax.annotation.Nullable SimplifiedAccount account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public SimplifiedAccount getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable SimplifiedAccount account) {
    this.account = account;
  }


  public PhysicalPort interfaceSpeed(@javax.annotation.Nullable Integer interfaceSpeed) {
    this.interfaceSpeed = interfaceSpeed;
    return this;
  }

  /**
   * Physical Port Speed in Mbps
   * minimum: 0
   * @return interfaceSpeed
   */
  @javax.annotation.Nullable
  public Integer getInterfaceSpeed() {
    return interfaceSpeed;
  }

  public void setInterfaceSpeed(@javax.annotation.Nullable Integer interfaceSpeed) {
    this.interfaceSpeed = interfaceSpeed;
  }


  public PhysicalPort interfaceType(@javax.annotation.Nullable String interfaceType) {
    this.interfaceType = interfaceType;
    return this;
  }

  /**
   * Physical Port Interface Type
   * @return interfaceType
   */
  @javax.annotation.Nullable
  public String getInterfaceType() {
    return interfaceType;
  }

  public void setInterfaceType(@javax.annotation.Nullable String interfaceType) {
    this.interfaceType = interfaceType;
  }


  public PhysicalPort uuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Equinix assigned response attribute for physical port identifier
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
  }


  public PhysicalPort tether(@javax.annotation.Nullable PortTether tether) {
    this.tether = tether;
    return this;
  }

  /**
   * Get tether
   * @return tether
   */
  @javax.annotation.Nullable
  public PortTether getTether() {
    return tether;
  }

  public void setTether(@javax.annotation.Nullable PortTether tether) {
    this.tether = tether;
  }


  public PhysicalPort demarcationPoint(@javax.annotation.Nullable PortDemarcationPoint demarcationPoint) {
    this.demarcationPoint = demarcationPoint;
    return this;
  }

  /**
   * Get demarcationPoint
   * @return demarcationPoint
   */
  @javax.annotation.Nullable
  public PortDemarcationPoint getDemarcationPoint() {
    return demarcationPoint;
  }

  public void setDemarcationPoint(@javax.annotation.Nullable PortDemarcationPoint demarcationPoint) {
    this.demarcationPoint = demarcationPoint;
  }


  public PhysicalPort settings(@javax.annotation.Nullable PhysicalPortSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public PhysicalPortSettings getSettings() {
    return settings;
  }

  public void setSettings(@javax.annotation.Nullable PhysicalPortSettings settings) {
    this.settings = settings;
  }


  public PhysicalPort _interface(@javax.annotation.Nullable PortInterface _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * Get _interface
   * @return _interface
   */
  @javax.annotation.Nullable
  public PortInterface getInterface() {
    return _interface;
  }

  public void setInterface(@javax.annotation.Nullable PortInterface _interface) {
    this._interface = _interface;
  }


  public PhysicalPort notifications(@javax.annotation.Nullable List<PortNotification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public PhysicalPort addNotificationsItem(PortNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * Notification preferences
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<PortNotification> getNotifications() {
    return notifications;
  }

  public void setNotifications(@javax.annotation.Nullable List<PortNotification> notifications) {
    this.notifications = notifications;
  }


  public PhysicalPort additionalInfo(@javax.annotation.Nullable List<PortAdditionalInfo> additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  public PhysicalPort addAdditionalInfoItem(PortAdditionalInfo additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

  /**
   * Physical Port additional information
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public List<PortAdditionalInfo> getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(@javax.annotation.Nullable List<PortAdditionalInfo> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public PhysicalPort order(@javax.annotation.Nullable PortOrder order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public PortOrder getOrder() {
    return order;
  }

  public void setOrder(@javax.annotation.Nullable PortOrder order) {
    this.order = order;
  }


  public PhysicalPort operation(@javax.annotation.Nullable PortOperation operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nullable
  public PortOperation getOperation() {
    return operation;
  }

  public void setOperation(@javax.annotation.Nullable PortOperation operation) {
    this.operation = operation;
  }


  public PhysicalPort loas(@javax.annotation.Nullable List<PortLoa> loas) {
    this.loas = loas;
    return this;
  }

  public PhysicalPort addLoasItem(PortLoa loasItem) {
    if (this.loas == null) {
      this.loas = new ArrayList<>();
    }
    this.loas.add(loasItem);
    return this;
  }

  /**
   * Port Loas
   * @return loas
   */
  @javax.annotation.Nullable
  public List<PortLoa> getLoas() {
    return loas;
  }

  public void setLoas(@javax.annotation.Nullable List<PortLoa> loas) {
    this.loas = loas;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PhysicalPort instance itself
   */
  public PhysicalPort putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalPort physicalPort = (PhysicalPort) o;
    return Objects.equals(this.href, physicalPort.href) &&
        Objects.equals(this.type, physicalPort.type) &&
        Objects.equals(this.id, physicalPort.id) &&
        Objects.equals(this.state, physicalPort.state) &&
        Objects.equals(this.account, physicalPort.account) &&
        Objects.equals(this.interfaceSpeed, physicalPort.interfaceSpeed) &&
        Objects.equals(this.interfaceType, physicalPort.interfaceType) &&
        Objects.equals(this.uuid, physicalPort.uuid) &&
        Objects.equals(this.tether, physicalPort.tether) &&
        Objects.equals(this.demarcationPoint, physicalPort.demarcationPoint) &&
        Objects.equals(this.settings, physicalPort.settings) &&
        Objects.equals(this._interface, physicalPort._interface) &&
        Objects.equals(this.notifications, physicalPort.notifications) &&
        Objects.equals(this.additionalInfo, physicalPort.additionalInfo) &&
        Objects.equals(this.order, physicalPort.order) &&
        Objects.equals(this.operation, physicalPort.operation) &&
        Objects.equals(this.loas, physicalPort.loas)&&
        Objects.equals(this.additionalProperties, physicalPort.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, type, id, state, account, interfaceSpeed, interfaceType, uuid, tether, demarcationPoint, settings, _interface, notifications, additionalInfo, order, operation, loas, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalPort {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    interfaceSpeed: ").append(toIndentedString(interfaceSpeed)).append("\n");
    sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    tether: ").append(toIndentedString(tether)).append("\n");
    sb.append("    demarcationPoint: ").append(toIndentedString(demarcationPoint)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    loas: ").append(toIndentedString(loas)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("href", "type", "id", "state", "account", "interfaceSpeed", "interfaceType", "uuid", "tether", "demarcationPoint", "settings", "interface", "notifications", "additionalInfo", "order", "operation", "loas"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhysicalPort
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhysicalPort.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PhysicalPort is not found in the empty JSON string", PhysicalPort.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        PhysicalPortType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        PortState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        SimplifiedAccount.validateJsonElement(jsonObj.get("account"));
      }
      if ((jsonObj.get("interfaceType") != null && !jsonObj.get("interfaceType").isJsonNull()) && !jsonObj.get("interfaceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `interfaceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interfaceType").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the optional field `tether`
      if (jsonObj.get("tether") != null && !jsonObj.get("tether").isJsonNull()) {
        PortTether.validateJsonElement(jsonObj.get("tether"));
      }
      // validate the optional field `demarcationPoint`
      if (jsonObj.get("demarcationPoint") != null && !jsonObj.get("demarcationPoint").isJsonNull()) {
        PortDemarcationPoint.validateJsonElement(jsonObj.get("demarcationPoint"));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        PhysicalPortSettings.validateJsonElement(jsonObj.get("settings"));
      }
      // validate the optional field `interface`
      if (jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) {
        PortInterface.validateJsonElement(jsonObj.get("interface"));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            PortNotification.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      if (jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) {
        JsonArray jsonArrayadditionalInfo = jsonObj.getAsJsonArray("additionalInfo");
        if (jsonArrayadditionalInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `additionalInfo` to be an array in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
          }

          // validate the optional field `additionalInfo` (array)
          for (int i = 0; i < jsonArrayadditionalInfo.size(); i++) {
            PortAdditionalInfo.validateJsonElement(jsonArrayadditionalInfo.get(i));
          };
        }
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        PortOrder.validateJsonElement(jsonObj.get("order"));
      }
      // validate the optional field `operation`
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) {
        PortOperation.validateJsonElement(jsonObj.get("operation"));
      }
      if (jsonObj.get("loas") != null && !jsonObj.get("loas").isJsonNull()) {
        JsonArray jsonArrayloas = jsonObj.getAsJsonArray("loas");
        if (jsonArrayloas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loas").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `loas` to be an array in the JSON string but got `%s`", jsonObj.get("loas").toString()));
          }

          // validate the optional field `loas` (array)
          for (int i = 0; i < jsonArrayloas.size(); i++) {
            PortLoa.validateJsonElement(jsonArrayloas.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhysicalPort.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhysicalPort' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhysicalPort> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhysicalPort.class));

       return (TypeAdapter<T>) new TypeAdapter<PhysicalPort>() {
           @Override
           public void write(JsonWriter out, PhysicalPort value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PhysicalPort read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PhysicalPort instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhysicalPort given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhysicalPort
   * @throws IOException if the JSON string is invalid with respect to PhysicalPort
   */
  public static PhysicalPort fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhysicalPort.class);
  }

  /**
   * Convert an instance of PhysicalPort to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

