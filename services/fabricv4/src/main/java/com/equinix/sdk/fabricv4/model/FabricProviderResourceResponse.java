/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import java.util.Locale;
import com.equinix.sdk.fabricv4.model.CloudRouterPostRequestPackage;
import com.equinix.sdk.fabricv4.model.ConnectionRedundancy;
import com.equinix.sdk.fabricv4.model.ConnectionSide;
import com.equinix.sdk.fabricv4.model.DeploymentState;
import com.equinix.sdk.fabricv4.model.FabricBGPConnectionIpv4;
import com.equinix.sdk.fabricv4.model.FabricConnectionResponse;
import com.equinix.sdk.fabricv4.model.FabricIPWANConnectionResponse;
import com.equinix.sdk.fabricv4.model.FabricIPWANResponse;
import com.equinix.sdk.fabricv4.model.FabricRouterResponse;
import com.equinix.sdk.fabricv4.model.FabricRoutingProtocolBGPType;
import com.equinix.sdk.fabricv4.model.NetworkScope;
import com.equinix.sdk.fabricv4.model.SimplifiedLocation;
import com.equinix.sdk.fabricv4.model.TopologyProperties;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.equinix.sdk.fabricv4.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class FabricProviderResourceResponse extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(FabricProviderResourceResponse.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FabricProviderResourceResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FabricProviderResourceResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FabricRouterResponse> adapterFabricRouterResponse = gson.getDelegateAdapter(this, TypeToken.get(FabricRouterResponse.class));
            final TypeAdapter<FabricConnectionResponse> adapterFabricConnectionResponse = gson.getDelegateAdapter(this, TypeToken.get(FabricConnectionResponse.class));
            final TypeAdapter<FabricRoutingProtocolBGPType> adapterFabricRoutingProtocolBGPType = gson.getDelegateAdapter(this, TypeToken.get(FabricRoutingProtocolBGPType.class));
            final TypeAdapter<FabricIPWANResponse> adapterFabricIPWANResponse = gson.getDelegateAdapter(this, TypeToken.get(FabricIPWANResponse.class));
            final TypeAdapter<FabricIPWANConnectionResponse> adapterFabricIPWANConnectionResponse = gson.getDelegateAdapter(this, TypeToken.get(FabricIPWANConnectionResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<FabricProviderResourceResponse>() {
                @Override
                public void write(JsonWriter out, FabricProviderResourceResponse value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `FabricRouterResponse`
                    if (value.getActualInstance() instanceof FabricRouterResponse) {
                        JsonElement element = adapterFabricRouterResponse.toJsonTree((FabricRouterResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FabricConnectionResponse`
                    if (value.getActualInstance() instanceof FabricConnectionResponse) {
                        JsonElement element = adapterFabricConnectionResponse.toJsonTree((FabricConnectionResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FabricRoutingProtocolBGPType`
                    if (value.getActualInstance() instanceof FabricRoutingProtocolBGPType) {
                        JsonElement element = adapterFabricRoutingProtocolBGPType.toJsonTree((FabricRoutingProtocolBGPType)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FabricIPWANResponse`
                    if (value.getActualInstance() instanceof FabricIPWANResponse) {
                        JsonElement element = adapterFabricIPWANResponse.toJsonTree((FabricIPWANResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FabricIPWANConnectionResponse`
                    if (value.getActualInstance() instanceof FabricIPWANConnectionResponse) {
                        JsonElement element = adapterFabricIPWANConnectionResponse.toJsonTree((FabricIPWANConnectionResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: FabricConnectionResponse, FabricIPWANConnectionResponse, FabricIPWANResponse, FabricRouterResponse, FabricRoutingProtocolBGPType");
                }

                @Override
                public FabricProviderResourceResponse read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize FabricRouterResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricRouterResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricRouterResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricRouterResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricRouterResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricRouterResponse'", e);
                    }
                    // deserialize FabricConnectionResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricConnectionResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricConnectionResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricConnectionResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricConnectionResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricConnectionResponse'", e);
                    }
                    // deserialize FabricRoutingProtocolBGPType
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricRoutingProtocolBGPType.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricRoutingProtocolBGPType;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricRoutingProtocolBGPType'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricRoutingProtocolBGPType failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricRoutingProtocolBGPType'", e);
                    }
                    // deserialize FabricIPWANResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricIPWANResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricIPWANResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricIPWANResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricIPWANResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricIPWANResponse'", e);
                    }
                    // deserialize FabricIPWANConnectionResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FabricIPWANConnectionResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterFabricIPWANConnectionResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FabricIPWANConnectionResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricIPWANConnectionResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FabricIPWANConnectionResponse'", e);
                    }

                    if (match == 1) {
                        FabricProviderResourceResponse ret = new FabricProviderResourceResponse();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format(Locale.ROOT, "Failed deserialization for FabricProviderResourceResponse: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public FabricProviderResourceResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public FabricProviderResourceResponse(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("FabricRouterResponse", FabricRouterResponse.class);
        schemas.put("FabricConnectionResponse", FabricConnectionResponse.class);
        schemas.put("FabricRoutingProtocolBGPType", FabricRoutingProtocolBGPType.class);
        schemas.put("FabricIPWANResponse", FabricIPWANResponse.class);
        schemas.put("FabricIPWANConnectionResponse", FabricIPWANConnectionResponse.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return FabricProviderResourceResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * FabricConnectionResponse, FabricIPWANConnectionResponse, FabricIPWANResponse, FabricRouterResponse, FabricRoutingProtocolBGPType
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof FabricRouterResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FabricConnectionResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FabricRoutingProtocolBGPType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FabricIPWANResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FabricIPWANConnectionResponse) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be FabricConnectionResponse, FabricIPWANConnectionResponse, FabricIPWANResponse, FabricRouterResponse, FabricRoutingProtocolBGPType");
    }

    /**
     * Get the actual instance, which can be the following:
     * FabricConnectionResponse, FabricIPWANConnectionResponse, FabricIPWANResponse, FabricRouterResponse, FabricRoutingProtocolBGPType
     *
     * @return The actual instance (FabricConnectionResponse, FabricIPWANConnectionResponse, FabricIPWANResponse, FabricRouterResponse, FabricRoutingProtocolBGPType)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricRouterResponse`. If the actual instance is not `FabricRouterResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricRouterResponse`
     * @throws ClassCastException if the instance is not `FabricRouterResponse`
     */
    public FabricRouterResponse getFabricRouterResponse() throws ClassCastException {
        return (FabricRouterResponse)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricConnectionResponse`. If the actual instance is not `FabricConnectionResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricConnectionResponse`
     * @throws ClassCastException if the instance is not `FabricConnectionResponse`
     */
    public FabricConnectionResponse getFabricConnectionResponse() throws ClassCastException {
        return (FabricConnectionResponse)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricRoutingProtocolBGPType`. If the actual instance is not `FabricRoutingProtocolBGPType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricRoutingProtocolBGPType`
     * @throws ClassCastException if the instance is not `FabricRoutingProtocolBGPType`
     */
    public FabricRoutingProtocolBGPType getFabricRoutingProtocolBGPType() throws ClassCastException {
        return (FabricRoutingProtocolBGPType)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricIPWANResponse`. If the actual instance is not `FabricIPWANResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricIPWANResponse`
     * @throws ClassCastException if the instance is not `FabricIPWANResponse`
     */
    public FabricIPWANResponse getFabricIPWANResponse() throws ClassCastException {
        return (FabricIPWANResponse)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FabricIPWANConnectionResponse`. If the actual instance is not `FabricIPWANConnectionResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FabricIPWANConnectionResponse`
     * @throws ClassCastException if the instance is not `FabricIPWANConnectionResponse`
     */
    public FabricIPWANConnectionResponse getFabricIPWANConnectionResponse() throws ClassCastException {
        return (FabricIPWANConnectionResponse)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FabricProviderResourceResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with FabricRouterResponse
        try {
            FabricRouterResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricRouterResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FabricConnectionResponse
        try {
            FabricConnectionResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricConnectionResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FabricRoutingProtocolBGPType
        try {
            FabricRoutingProtocolBGPType.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricRoutingProtocolBGPType failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FabricIPWANResponse
        try {
            FabricIPWANResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricIPWANResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FabricIPWANConnectionResponse
        try {
            FabricIPWANConnectionResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format(Locale.ROOT, "Deserialization for FabricIPWANConnectionResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format(Locale.ROOT, "The JSON string is invalid for FabricProviderResourceResponse with oneOf schemas: FabricConnectionResponse, FabricIPWANConnectionResponse, FabricIPWANResponse, FabricRouterResponse, FabricRoutingProtocolBGPType. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of FabricProviderResourceResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FabricProviderResourceResponse
     * @throws IOException if the JSON string is invalid with respect to FabricProviderResourceResponse
     */
    public static FabricProviderResourceResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FabricProviderResourceResponse.class);
    }

    /**
     * Convert an instance of FabricProviderResourceResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

