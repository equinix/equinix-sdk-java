/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import java.util.Locale;
import com.equinix.sdk.fabricv4.model.PeeringConnectionResIpv4AuthKeys;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.equinix.sdk.fabricv4.JSON;

/**
 * BGP IPv6 Connection Details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class PeeringConnectionResIpv6 {
  public static final String SERIALIZED_NAME_CUSTOMER_PEER_IP = "customerPeerIp";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PEER_IP)
  @javax.annotation.Nullable
  private String customerPeerIp;

  public static final String SERIALIZED_NAME_PRIMARY_EQUINIX_PEER_IP = "primaryEquinixPeerIp";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EQUINIX_PEER_IP)
  @javax.annotation.Nullable
  private String primaryEquinixPeerIp;

  public static final String SERIALIZED_NAME_SECONDARY_EQUINIX_PEER_IP = "secondaryEquinixPeerIp";
  @SerializedName(SERIALIZED_NAME_SECONDARY_EQUINIX_PEER_IP)
  @javax.annotation.Nullable
  private String secondaryEquinixPeerIp;

  public static final String SERIALIZED_NAME_REVERSE_DNS_ADDRESS = "reverseDnsAddress";
  @SerializedName(SERIALIZED_NAME_REVERSE_DNS_ADDRESS)
  @javax.annotation.Nullable
  private String reverseDnsAddress;

  public static final String SERIALIZED_NAME_AS_SET = "asSet";
  @SerializedName(SERIALIZED_NAME_AS_SET)
  @javax.annotation.Nullable
  private String asSet;

  public static final String SERIALIZED_NAME_MLPE_ENABLED = "mlpeEnabled";
  @SerializedName(SERIALIZED_NAME_MLPE_ENABLED)
  @javax.annotation.Nullable
  private Boolean mlpeEnabled;

  public static final String SERIALIZED_NAME_AUTH_KEYS = "authKeys";
  @SerializedName(SERIALIZED_NAME_AUTH_KEYS)
  @javax.annotation.Nullable
  private List<PeeringConnectionResIpv4AuthKeys> authKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_PREFIXES = "ipPrefixes";
  @SerializedName(SERIALIZED_NAME_IP_PREFIXES)
  @javax.annotation.Nullable
  private List<String> ipPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public PeeringConnectionResIpv6() {
  }

  public PeeringConnectionResIpv6 customerPeerIp(@javax.annotation.Nullable String customerPeerIp) {
    this.customerPeerIp = customerPeerIp;
    return this;
  }

  /**
   * Customer peer IPv6 address
   * @return customerPeerIp
   */
  @javax.annotation.Nullable
  public String getCustomerPeerIp() {
    return customerPeerIp;
  }

  public void setCustomerPeerIp(@javax.annotation.Nullable String customerPeerIp) {
    this.customerPeerIp = customerPeerIp;
  }


  public PeeringConnectionResIpv6 primaryEquinixPeerIp(@javax.annotation.Nullable String primaryEquinixPeerIp) {
    this.primaryEquinixPeerIp = primaryEquinixPeerIp;
    return this;
  }

  /**
   * Primary Equinix peer IPv6 address
   * @return primaryEquinixPeerIp
   */
  @javax.annotation.Nullable
  public String getPrimaryEquinixPeerIp() {
    return primaryEquinixPeerIp;
  }

  public void setPrimaryEquinixPeerIp(@javax.annotation.Nullable String primaryEquinixPeerIp) {
    this.primaryEquinixPeerIp = primaryEquinixPeerIp;
  }


  public PeeringConnectionResIpv6 secondaryEquinixPeerIp(@javax.annotation.Nullable String secondaryEquinixPeerIp) {
    this.secondaryEquinixPeerIp = secondaryEquinixPeerIp;
    return this;
  }

  /**
   * Secondary Equinix peer IPv6 address
   * @return secondaryEquinixPeerIp
   */
  @javax.annotation.Nullable
  public String getSecondaryEquinixPeerIp() {
    return secondaryEquinixPeerIp;
  }

  public void setSecondaryEquinixPeerIp(@javax.annotation.Nullable String secondaryEquinixPeerIp) {
    this.secondaryEquinixPeerIp = secondaryEquinixPeerIp;
  }


  public PeeringConnectionResIpv6 reverseDnsAddress(@javax.annotation.Nullable String reverseDnsAddress) {
    this.reverseDnsAddress = reverseDnsAddress;
    return this;
  }

  /**
   * Reverse DNS address for the BGP session
   * @return reverseDnsAddress
   */
  @javax.annotation.Nullable
  public String getReverseDnsAddress() {
    return reverseDnsAddress;
  }

  public void setReverseDnsAddress(@javax.annotation.Nullable String reverseDnsAddress) {
    this.reverseDnsAddress = reverseDnsAddress;
  }


  public PeeringConnectionResIpv6 asSet(@javax.annotation.Nullable String asSet) {
    this.asSet = asSet;
    return this;
  }

  /**
   * Autonomous System Set for the BGP session
   * @return asSet
   */
  @javax.annotation.Nullable
  public String getAsSet() {
    return asSet;
  }

  public void setAsSet(@javax.annotation.Nullable String asSet) {
    this.asSet = asSet;
  }


  public PeeringConnectionResIpv6 mlpeEnabled(@javax.annotation.Nullable Boolean mlpeEnabled) {
    this.mlpeEnabled = mlpeEnabled;
    return this;
  }

  /**
   * Whether MLPE is enabled for the BGP session
   * @return mlpeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMlpeEnabled() {
    return mlpeEnabled;
  }

  public void setMlpeEnabled(@javax.annotation.Nullable Boolean mlpeEnabled) {
    this.mlpeEnabled = mlpeEnabled;
  }


  public PeeringConnectionResIpv6 authKeys(@javax.annotation.Nullable List<PeeringConnectionResIpv4AuthKeys> authKeys) {
    this.authKeys = authKeys;
    return this;
  }

  public PeeringConnectionResIpv6 addAuthKeysItem(PeeringConnectionResIpv4AuthKeys authKeysItem) {
    if (this.authKeys == null) {
      this.authKeys = new ArrayList<>();
    }
    this.authKeys.add(authKeysItem);
    return this;
  }

  /**
   * Get authKeys
   * @return authKeys
   */
  @javax.annotation.Nullable
  public List<PeeringConnectionResIpv4AuthKeys> getAuthKeys() {
    return authKeys;
  }

  public void setAuthKeys(@javax.annotation.Nullable List<PeeringConnectionResIpv4AuthKeys> authKeys) {
    this.authKeys = authKeys;
  }


  public PeeringConnectionResIpv6 ipPrefixes(@javax.annotation.Nullable List<String> ipPrefixes) {
    this.ipPrefixes = ipPrefixes;
    return this;
  }

  public PeeringConnectionResIpv6 addIpPrefixesItem(String ipPrefixesItem) {
    if (this.ipPrefixes == null) {
      this.ipPrefixes = new ArrayList<>();
    }
    this.ipPrefixes.add(ipPrefixesItem);
    return this;
  }

  /**
   * List of IP prefixes for the BGP session
   * @return ipPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getIpPrefixes() {
    return ipPrefixes;
  }

  public void setIpPrefixes(@javax.annotation.Nullable List<String> ipPrefixes) {
    this.ipPrefixes = ipPrefixes;
  }


  public PeeringConnectionResIpv6 enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether BGP IPv6 is enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PeeringConnectionResIpv6 instance itself
   */
  public PeeringConnectionResIpv6 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeeringConnectionResIpv6 peeringConnectionResIpv6 = (PeeringConnectionResIpv6) o;
    return Objects.equals(this.customerPeerIp, peeringConnectionResIpv6.customerPeerIp) &&
        Objects.equals(this.primaryEquinixPeerIp, peeringConnectionResIpv6.primaryEquinixPeerIp) &&
        Objects.equals(this.secondaryEquinixPeerIp, peeringConnectionResIpv6.secondaryEquinixPeerIp) &&
        Objects.equals(this.reverseDnsAddress, peeringConnectionResIpv6.reverseDnsAddress) &&
        Objects.equals(this.asSet, peeringConnectionResIpv6.asSet) &&
        Objects.equals(this.mlpeEnabled, peeringConnectionResIpv6.mlpeEnabled) &&
        Objects.equals(this.authKeys, peeringConnectionResIpv6.authKeys) &&
        Objects.equals(this.ipPrefixes, peeringConnectionResIpv6.ipPrefixes) &&
        Objects.equals(this.enabled, peeringConnectionResIpv6.enabled)&&
        Objects.equals(this.additionalProperties, peeringConnectionResIpv6.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerPeerIp, primaryEquinixPeerIp, secondaryEquinixPeerIp, reverseDnsAddress, asSet, mlpeEnabled, authKeys, ipPrefixes, enabled, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeeringConnectionResIpv6 {\n");
    sb.append("    customerPeerIp: ").append(toIndentedString(customerPeerIp)).append("\n");
    sb.append("    primaryEquinixPeerIp: ").append(toIndentedString(primaryEquinixPeerIp)).append("\n");
    sb.append("    secondaryEquinixPeerIp: ").append(toIndentedString(secondaryEquinixPeerIp)).append("\n");
    sb.append("    reverseDnsAddress: ").append(toIndentedString(reverseDnsAddress)).append("\n");
    sb.append("    asSet: ").append(toIndentedString(asSet)).append("\n");
    sb.append("    mlpeEnabled: ").append(toIndentedString(mlpeEnabled)).append("\n");
    sb.append("    authKeys: ").append(toIndentedString(authKeys)).append("\n");
    sb.append("    ipPrefixes: ").append(toIndentedString(ipPrefixes)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("customerPeerIp", "primaryEquinixPeerIp", "secondaryEquinixPeerIp", "reverseDnsAddress", "asSet", "mlpeEnabled", "authKeys", "ipPrefixes", "enabled"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeeringConnectionResIpv6
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeeringConnectionResIpv6.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PeeringConnectionResIpv6 is not found in the empty JSON string", PeeringConnectionResIpv6.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customerPeerIp") != null && !jsonObj.get("customerPeerIp").isJsonNull()) && !jsonObj.get("customerPeerIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `customerPeerIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerPeerIp").toString()));
      }
      if ((jsonObj.get("primaryEquinixPeerIp") != null && !jsonObj.get("primaryEquinixPeerIp").isJsonNull()) && !jsonObj.get("primaryEquinixPeerIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `primaryEquinixPeerIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEquinixPeerIp").toString()));
      }
      if ((jsonObj.get("secondaryEquinixPeerIp") != null && !jsonObj.get("secondaryEquinixPeerIp").isJsonNull()) && !jsonObj.get("secondaryEquinixPeerIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `secondaryEquinixPeerIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryEquinixPeerIp").toString()));
      }
      if ((jsonObj.get("reverseDnsAddress") != null && !jsonObj.get("reverseDnsAddress").isJsonNull()) && !jsonObj.get("reverseDnsAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `reverseDnsAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reverseDnsAddress").toString()));
      }
      if ((jsonObj.get("asSet") != null && !jsonObj.get("asSet").isJsonNull()) && !jsonObj.get("asSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `asSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asSet").toString()));
      }
      if (jsonObj.get("authKeys") != null && !jsonObj.get("authKeys").isJsonNull()) {
        JsonArray jsonArrayauthKeys = jsonObj.getAsJsonArray("authKeys");
        if (jsonArrayauthKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `authKeys` to be an array in the JSON string but got `%s`", jsonObj.get("authKeys").toString()));
          }

          // validate the optional field `authKeys` (array)
          for (int i = 0; i < jsonArrayauthKeys.size(); i++) {
            PeeringConnectionResIpv4AuthKeys.validateJsonElement(jsonArrayauthKeys.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ipPrefixes") != null && !jsonObj.get("ipPrefixes").isJsonNull() && !jsonObj.get("ipPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `ipPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("ipPrefixes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeeringConnectionResIpv6.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeeringConnectionResIpv6' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeeringConnectionResIpv6> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeeringConnectionResIpv6.class));

       return (TypeAdapter<T>) new TypeAdapter<PeeringConnectionResIpv6>() {
           @Override
           public void write(JsonWriter out, PeeringConnectionResIpv6 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PeeringConnectionResIpv6 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PeeringConnectionResIpv6 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeeringConnectionResIpv6 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeeringConnectionResIpv6
   * @throws IOException if the JSON string is invalid with respect to PeeringConnectionResIpv6
   */
  public static PeeringConnectionResIpv6 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeeringConnectionResIpv6.class);
  }

  /**
   * Convert an instance of PeeringConnectionResIpv6 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

