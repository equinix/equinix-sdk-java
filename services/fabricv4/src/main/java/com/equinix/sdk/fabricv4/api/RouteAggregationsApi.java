/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.api;

import com.equinix.sdk.fabricv4.ApiCallback;
import com.equinix.sdk.fabricv4.ApiClient;
import com.equinix.sdk.fabricv4.ApiException;
import com.equinix.sdk.fabricv4.ApiResponse;
import com.equinix.sdk.fabricv4.Configuration;
import com.equinix.sdk.fabricv4.Pair;
import com.equinix.sdk.fabricv4.ProgressRequestBody;
import com.equinix.sdk.fabricv4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.sdk.fabricv4.model.ConnectionRouteAggregationData;
import com.equinix.sdk.fabricv4.model.Error;
import com.equinix.sdk.fabricv4.model.GetAllConnectionRouteAggregationsResponse;
import com.equinix.sdk.fabricv4.model.GetRouteAggregationGetConnectionsResponse;
import com.equinix.sdk.fabricv4.model.RouteAggregationChangeData;
import com.equinix.sdk.fabricv4.model.RouteAggregationChangeDataResponse;
import com.equinix.sdk.fabricv4.model.RouteAggregationsBase;
import com.equinix.sdk.fabricv4.model.RouteAggregationsData;
import com.equinix.sdk.fabricv4.model.RouteAggregationsPatchRequestItem;
import com.equinix.sdk.fabricv4.model.RouteAggregationsSearchBase;
import com.equinix.sdk.fabricv4.model.RouteAggregationsSearchResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RouteAggregationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RouteAggregationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RouteAggregationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for attachConnectionRouteAggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachConnectionRouteAggregationCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routeAggregations/{routeAggregationId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachConnectionRouteAggregationValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling attachConnectionRouteAggregation(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling attachConnectionRouteAggregation(Async)");
        }

        return attachConnectionRouteAggregationCall(routeAggregationId, connectionId, _callback);

    }

    /**
     * Attach Aggregation
     * This API provides capability to attach a Route Aggregation to a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @return ConnectionRouteAggregationData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionRouteAggregationData attachConnectionRouteAggregation(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId) throws ApiException {
        ApiResponse<ConnectionRouteAggregationData> localVarResp = attachConnectionRouteAggregationWithHttpInfo(routeAggregationId, connectionId);
        return localVarResp.getData();
    }

    /**
     * Attach Aggregation
     * This API provides capability to attach a Route Aggregation to a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @return ApiResponse&lt;ConnectionRouteAggregationData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionRouteAggregationData> attachConnectionRouteAggregationWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId) throws ApiException {
        okhttp3.Call localVarCall = attachConnectionRouteAggregationValidateBeforeCall(routeAggregationId, connectionId, null);
        Type localVarReturnType = new TypeToken<ConnectionRouteAggregationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attach Aggregation (asynchronously)
     * This API provides capability to attach a Route Aggregation to a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachConnectionRouteAggregationAsync(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback<ConnectionRouteAggregationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachConnectionRouteAggregationValidateBeforeCall(routeAggregationId, connectionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectionRouteAggregationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRouteAggregation
     * @param routeAggregationsBase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteAggregationCall(@javax.annotation.Nonnull RouteAggregationsBase routeAggregationsBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeAggregationsBase;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRouteAggregationValidateBeforeCall(@javax.annotation.Nonnull RouteAggregationsBase routeAggregationsBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationsBase' is set
        if (routeAggregationsBase == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationsBase' when calling createRouteAggregation(Async)");
        }

        return createRouteAggregationCall(routeAggregationsBase, _callback);

    }

    /**
     * Create Aggregations
     * This API provides capability to create a Route Aggregation
     * @param routeAggregationsBase  (required)
     * @return RouteAggregationsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationsData createRouteAggregation(@javax.annotation.Nonnull RouteAggregationsBase routeAggregationsBase) throws ApiException {
        ApiResponse<RouteAggregationsData> localVarResp = createRouteAggregationWithHttpInfo(routeAggregationsBase);
        return localVarResp.getData();
    }

    /**
     * Create Aggregations
     * This API provides capability to create a Route Aggregation
     * @param routeAggregationsBase  (required)
     * @return ApiResponse&lt;RouteAggregationsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationsData> createRouteAggregationWithHttpInfo(@javax.annotation.Nonnull RouteAggregationsBase routeAggregationsBase) throws ApiException {
        okhttp3.Call localVarCall = createRouteAggregationValidateBeforeCall(routeAggregationsBase, null);
        Type localVarReturnType = new TypeToken<RouteAggregationsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Aggregations (asynchronously)
     * This API provides capability to create a Route Aggregation
     * @param routeAggregationsBase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteAggregationAsync(@javax.annotation.Nonnull RouteAggregationsBase routeAggregationsBase, final ApiCallback<RouteAggregationsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRouteAggregationValidateBeforeCall(routeAggregationsBase, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRouteAggregationByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRouteAggregationByUuidCall(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRouteAggregationByUuidValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling deleteRouteAggregationByUuid(Async)");
        }

        return deleteRouteAggregationByUuidCall(routeAggregationId, _callback);

    }

    /**
     * Delete Aggregation
     * This API provides capability to delete a Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @return RouteAggregationsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationsData deleteRouteAggregationByUuid(@javax.annotation.Nonnull String routeAggregationId) throws ApiException {
        ApiResponse<RouteAggregationsData> localVarResp = deleteRouteAggregationByUuidWithHttpInfo(routeAggregationId);
        return localVarResp.getData();
    }

    /**
     * Delete Aggregation
     * This API provides capability to delete a Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @return ApiResponse&lt;RouteAggregationsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationsData> deleteRouteAggregationByUuidWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId) throws ApiException {
        okhttp3.Call localVarCall = deleteRouteAggregationByUuidValidateBeforeCall(routeAggregationId, null);
        Type localVarReturnType = new TypeToken<RouteAggregationsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Aggregation (asynchronously)
     * This API provides capability to delete a Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRouteAggregationByUuidAsync(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback<RouteAggregationsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRouteAggregationByUuidValidateBeforeCall(routeAggregationId, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detachConnectionRouteAggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachConnectionRouteAggregationCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routeAggregations/{routeAggregationId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detachConnectionRouteAggregationValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling detachConnectionRouteAggregation(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling detachConnectionRouteAggregation(Async)");
        }

        return detachConnectionRouteAggregationCall(routeAggregationId, connectionId, _callback);

    }

    /**
     * Detach Aggregation
     * This API provides capability to detach a Route Aggregation from a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @return ConnectionRouteAggregationData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionRouteAggregationData detachConnectionRouteAggregation(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId) throws ApiException {
        ApiResponse<ConnectionRouteAggregationData> localVarResp = detachConnectionRouteAggregationWithHttpInfo(routeAggregationId, connectionId);
        return localVarResp.getData();
    }

    /**
     * Detach Aggregation
     * This API provides capability to detach a Route Aggregation from a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @return ApiResponse&lt;ConnectionRouteAggregationData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionRouteAggregationData> detachConnectionRouteAggregationWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId) throws ApiException {
        okhttp3.Call localVarCall = detachConnectionRouteAggregationValidateBeforeCall(routeAggregationId, connectionId, null);
        Type localVarReturnType = new TypeToken<ConnectionRouteAggregationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detach Aggregation (asynchronously)
     * This API provides capability to detach a Route Aggregation from a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachConnectionRouteAggregationAsync(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback<ConnectionRouteAggregationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = detachConnectionRouteAggregationValidateBeforeCall(routeAggregationId, connectionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectionRouteAggregationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnectionRouteAggregationByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRouteAggregationByUuidCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routeAggregations/{routeAggregationId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionRouteAggregationByUuidValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getConnectionRouteAggregationByUuid(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getConnectionRouteAggregationByUuid(Async)");
        }

        return getConnectionRouteAggregationByUuidCall(routeAggregationId, connectionId, _callback);

    }

    /**
     * Get Aggregation
     * This API provides capability to view a specific Route Aggregation attached to a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @return ConnectionRouteAggregationData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionRouteAggregationData getConnectionRouteAggregationByUuid(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId) throws ApiException {
        ApiResponse<ConnectionRouteAggregationData> localVarResp = getConnectionRouteAggregationByUuidWithHttpInfo(routeAggregationId, connectionId);
        return localVarResp.getData();
    }

    /**
     * Get Aggregation
     * This API provides capability to view a specific Route Aggregation attached to a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @return ApiResponse&lt;ConnectionRouteAggregationData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionRouteAggregationData> getConnectionRouteAggregationByUuidWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId) throws ApiException {
        okhttp3.Call localVarCall = getConnectionRouteAggregationByUuidValidateBeforeCall(routeAggregationId, connectionId, null);
        Type localVarReturnType = new TypeToken<ConnectionRouteAggregationData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Aggregation (asynchronously)
     * This API provides capability to view a specific Route Aggregation attached to a Connection
     * @param routeAggregationId Route Aggregations Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRouteAggregationByUuidAsync(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull String connectionId, final ApiCallback<ConnectionRouteAggregationData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionRouteAggregationByUuidValidateBeforeCall(routeAggregationId, connectionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectionRouteAggregationData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnectionRouteAggregations
     * @param connectionId Connection Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRouteAggregationsCall(@javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routeAggregations"
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionRouteAggregationsValidateBeforeCall(@javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getConnectionRouteAggregations(Async)");
        }

        return getConnectionRouteAggregationsCall(connectionId, _callback);

    }

    /**
     * Get All Aggregations
     * This API provides capability to view all Route Aggregations attached to a Connection
     * @param connectionId Connection Id (required)
     * @return GetAllConnectionRouteAggregationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetAllConnectionRouteAggregationsResponse getConnectionRouteAggregations(@javax.annotation.Nonnull String connectionId) throws ApiException {
        ApiResponse<GetAllConnectionRouteAggregationsResponse> localVarResp = getConnectionRouteAggregationsWithHttpInfo(connectionId);
        return localVarResp.getData();
    }

    /**
     * Get All Aggregations
     * This API provides capability to view all Route Aggregations attached to a Connection
     * @param connectionId Connection Id (required)
     * @return ApiResponse&lt;GetAllConnectionRouteAggregationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllConnectionRouteAggregationsResponse> getConnectionRouteAggregationsWithHttpInfo(@javax.annotation.Nonnull String connectionId) throws ApiException {
        okhttp3.Call localVarCall = getConnectionRouteAggregationsValidateBeforeCall(connectionId, null);
        Type localVarReturnType = new TypeToken<GetAllConnectionRouteAggregationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Aggregations (asynchronously)
     * This API provides capability to view all Route Aggregations attached to a Connection
     * @param connectionId Connection Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRouteAggregationsAsync(@javax.annotation.Nonnull String connectionId, final ApiCallback<GetAllConnectionRouteAggregationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionRouteAggregationsValidateBeforeCall(connectionId, _callback);
        Type localVarReturnType = new TypeToken<GetAllConnectionRouteAggregationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteAggregationByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationByUuidCall(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteAggregationByUuidValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getRouteAggregationByUuid(Async)");
        }

        return getRouteAggregationByUuidCall(routeAggregationId, _callback);

    }

    /**
     * Get Aggregation
     * This API provides capability to view a Route Aggregation by UUID
     * @param routeAggregationId Route Aggregations Id (required)
     * @return RouteAggregationsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationsData getRouteAggregationByUuid(@javax.annotation.Nonnull String routeAggregationId) throws ApiException {
        ApiResponse<RouteAggregationsData> localVarResp = getRouteAggregationByUuidWithHttpInfo(routeAggregationId);
        return localVarResp.getData();
    }

    /**
     * Get Aggregation
     * This API provides capability to view a Route Aggregation by UUID
     * @param routeAggregationId Route Aggregations Id (required)
     * @return ApiResponse&lt;RouteAggregationsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationsData> getRouteAggregationByUuidWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId) throws ApiException {
        okhttp3.Call localVarCall = getRouteAggregationByUuidValidateBeforeCall(routeAggregationId, null);
        Type localVarReturnType = new TypeToken<RouteAggregationsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Aggregation (asynchronously)
     * This API provides capability to view a Route Aggregation by UUID
     * @param routeAggregationId Route Aggregations Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationByUuidAsync(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback<RouteAggregationsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteAggregationByUuidValidateBeforeCall(routeAggregationId, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteAggregationChangeByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param changeId Routing Protocol Change UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationChangeByUuidCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull UUID changeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/changes/{changeId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteAggregationChangeByUuidValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull UUID changeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getRouteAggregationChangeByUuid(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling getRouteAggregationChangeByUuid(Async)");
        }

        return getRouteAggregationChangeByUuidCall(routeAggregationId, changeId, _callback);

    }

    /**
     * Get Change By ID
     * This API provides capability to retrieve a specific Route Aggregation&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param changeId Routing Protocol Change UUID (required)
     * @return RouteAggregationChangeData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationChangeData getRouteAggregationChangeByUuid(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull UUID changeId) throws ApiException {
        ApiResponse<RouteAggregationChangeData> localVarResp = getRouteAggregationChangeByUuidWithHttpInfo(routeAggregationId, changeId);
        return localVarResp.getData();
    }

    /**
     * Get Change By ID
     * This API provides capability to retrieve a specific Route Aggregation&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param changeId Routing Protocol Change UUID (required)
     * @return ApiResponse&lt;RouteAggregationChangeData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationChangeData> getRouteAggregationChangeByUuidWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull UUID changeId) throws ApiException {
        okhttp3.Call localVarCall = getRouteAggregationChangeByUuidValidateBeforeCall(routeAggregationId, changeId, null);
        Type localVarReturnType = new TypeToken<RouteAggregationChangeData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Change By ID (asynchronously)
     * This API provides capability to retrieve a specific Route Aggregation&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param changeId Routing Protocol Change UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationChangeByUuidAsync(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull UUID changeId, final ApiCallback<RouteAggregationChangeData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteAggregationChangeByUuidValidateBeforeCall(routeAggregationId, changeId, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationChangeData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteAggregationChanges
     * @param routeAggregationId Route Aggregations Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationChangesCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/changes"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteAggregationChangesValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getRouteAggregationChanges(Async)");
        }

        return getRouteAggregationChangesCall(routeAggregationId, offset, limit, _callback);

    }

    /**
     * Get All Changes
     * This API provides capability to retrieve all of a Route Aggregation&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return RouteAggregationChangeDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationChangeDataResponse getRouteAggregationChanges(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<RouteAggregationChangeDataResponse> localVarResp = getRouteAggregationChangesWithHttpInfo(routeAggregationId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get All Changes
     * This API provides capability to retrieve all of a Route Aggregation&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;RouteAggregationChangeDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationChangeDataResponse> getRouteAggregationChangesWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRouteAggregationChangesValidateBeforeCall(routeAggregationId, offset, limit, null);
        Type localVarReturnType = new TypeToken<RouteAggregationChangeDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Changes (asynchronously)
     * This API provides capability to retrieve all of a Route Aggregation&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationChangesAsync(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<RouteAggregationChangeDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteAggregationChangesValidateBeforeCall(routeAggregationId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationChangeDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteAggregationConnections
     * @param routeAggregationId Route Aggregations Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationConnectionsCall(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/connections"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteAggregationConnectionsValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getRouteAggregationConnections(Async)");
        }

        return getRouteAggregationConnectionsCall(routeAggregationId, _callback);

    }

    /**
     * Get All Connections on Route Aggregation
     * This API provides capability to view all Connections using the Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @return GetRouteAggregationGetConnectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetRouteAggregationGetConnectionsResponse getRouteAggregationConnections(@javax.annotation.Nonnull String routeAggregationId) throws ApiException {
        ApiResponse<GetRouteAggregationGetConnectionsResponse> localVarResp = getRouteAggregationConnectionsWithHttpInfo(routeAggregationId);
        return localVarResp.getData();
    }

    /**
     * Get All Connections on Route Aggregation
     * This API provides capability to view all Connections using the Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @return ApiResponse&lt;GetRouteAggregationGetConnectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRouteAggregationGetConnectionsResponse> getRouteAggregationConnectionsWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId) throws ApiException {
        okhttp3.Call localVarCall = getRouteAggregationConnectionsValidateBeforeCall(routeAggregationId, null);
        Type localVarReturnType = new TypeToken<GetRouteAggregationGetConnectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Connections on Route Aggregation (asynchronously)
     * This API provides capability to view all Connections using the Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationConnectionsAsync(@javax.annotation.Nonnull String routeAggregationId, final ApiCallback<GetRouteAggregationGetConnectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteAggregationConnectionsValidateBeforeCall(routeAggregationId, _callback);
        Type localVarReturnType = new TypeToken<GetRouteAggregationGetConnectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchRouteAggregationByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationsPatchRequestItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchRouteAggregationByUuidCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull List<RouteAggregationsPatchRequestItem> routeAggregationsPatchRequestItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeAggregationsPatchRequestItem;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchRouteAggregationByUuidValidateBeforeCall(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull List<RouteAggregationsPatchRequestItem> routeAggregationsPatchRequestItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling patchRouteAggregationByUuid(Async)");
        }

        // verify the required parameter 'routeAggregationsPatchRequestItem' is set
        if (routeAggregationsPatchRequestItem == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationsPatchRequestItem' when calling patchRouteAggregationByUuid(Async)");
        }

        return patchRouteAggregationByUuidCall(routeAggregationId, routeAggregationsPatchRequestItem, _callback);

    }

    /**
     * Patch Aggregation
     * This API provides capability to partially update a Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationsPatchRequestItem  (required)
     * @return RouteAggregationsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationsData patchRouteAggregationByUuid(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull List<RouteAggregationsPatchRequestItem> routeAggregationsPatchRequestItem) throws ApiException {
        ApiResponse<RouteAggregationsData> localVarResp = patchRouteAggregationByUuidWithHttpInfo(routeAggregationId, routeAggregationsPatchRequestItem);
        return localVarResp.getData();
    }

    /**
     * Patch Aggregation
     * This API provides capability to partially update a Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationsPatchRequestItem  (required)
     * @return ApiResponse&lt;RouteAggregationsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationsData> patchRouteAggregationByUuidWithHttpInfo(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull List<RouteAggregationsPatchRequestItem> routeAggregationsPatchRequestItem) throws ApiException {
        okhttp3.Call localVarCall = patchRouteAggregationByUuidValidateBeforeCall(routeAggregationId, routeAggregationsPatchRequestItem, null);
        Type localVarReturnType = new TypeToken<RouteAggregationsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Aggregation (asynchronously)
     * This API provides capability to partially update a Route Aggregation
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationsPatchRequestItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchRouteAggregationByUuidAsync(@javax.annotation.Nonnull String routeAggregationId, @javax.annotation.Nonnull List<RouteAggregationsPatchRequestItem> routeAggregationsPatchRequestItem, final ApiCallback<RouteAggregationsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchRouteAggregationByUuidValidateBeforeCall(routeAggregationId, routeAggregationsPatchRequestItem, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRouteAggregations
     * @param routeAggregationsSearchBase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRouteAggregationsCall(@javax.annotation.Nonnull RouteAggregationsSearchBase routeAggregationsSearchBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeAggregationsSearchBase;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRouteAggregationsValidateBeforeCall(@javax.annotation.Nonnull RouteAggregationsSearchBase routeAggregationsSearchBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationsSearchBase' is set
        if (routeAggregationsSearchBase == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationsSearchBase' when calling searchRouteAggregations(Async)");
        }

        return searchRouteAggregationsCall(routeAggregationsSearchBase, _callback);

    }

    /**
     * Search Aggregations
     * This API provides capability to search Route Aggregations
     * @param routeAggregationsSearchBase  (required)
     * @return RouteAggregationsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationsSearchResponse searchRouteAggregations(@javax.annotation.Nonnull RouteAggregationsSearchBase routeAggregationsSearchBase) throws ApiException {
        ApiResponse<RouteAggregationsSearchResponse> localVarResp = searchRouteAggregationsWithHttpInfo(routeAggregationsSearchBase);
        return localVarResp.getData();
    }

    /**
     * Search Aggregations
     * This API provides capability to search Route Aggregations
     * @param routeAggregationsSearchBase  (required)
     * @return ApiResponse&lt;RouteAggregationsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationsSearchResponse> searchRouteAggregationsWithHttpInfo(@javax.annotation.Nonnull RouteAggregationsSearchBase routeAggregationsSearchBase) throws ApiException {
        okhttp3.Call localVarCall = searchRouteAggregationsValidateBeforeCall(routeAggregationsSearchBase, null);
        Type localVarReturnType = new TypeToken<RouteAggregationsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Aggregations (asynchronously)
     * This API provides capability to search Route Aggregations
     * @param routeAggregationsSearchBase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRouteAggregationsAsync(@javax.annotation.Nonnull RouteAggregationsSearchBase routeAggregationsSearchBase, final ApiCallback<RouteAggregationsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRouteAggregationsValidateBeforeCall(routeAggregationsSearchBase, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
