/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.api;

import com.equinix.sdk.fabricv4.ApiCallback;
import com.equinix.sdk.fabricv4.ApiClient;
import com.equinix.sdk.fabricv4.ApiException;
import com.equinix.sdk.fabricv4.ApiResponse;
import com.equinix.sdk.fabricv4.Configuration;
import com.equinix.sdk.fabricv4.Pair;
import com.equinix.sdk.fabricv4.ProgressRequestBody;
import com.equinix.sdk.fabricv4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.sdk.fabricv4.model.Error;
import com.equinix.sdk.fabricv4.model.GetAllStreamSubscriptionResponse;
import com.equinix.sdk.fabricv4.model.StreamSubscription;
import com.equinix.sdk.fabricv4.model.StreamSubscriptionPostRequest;
import com.equinix.sdk.fabricv4.model.StreamSubscriptionPutRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamSubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamSubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamSubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createStreamSubscriptions
     * @param streamId Stream UUID (required)
     * @param streamSubscriptionPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamSubscriptionsCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull StreamSubscriptionPostRequest streamSubscriptionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamSubscriptionPostRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/subscriptions"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamSubscriptionsValidateBeforeCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull StreamSubscriptionPostRequest streamSubscriptionPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling createStreamSubscriptions(Async)");
        }

        // verify the required parameter 'streamSubscriptionPostRequest' is set
        if (streamSubscriptionPostRequest == null) {
            throw new ApiException("Missing the required parameter 'streamSubscriptionPostRequest' when calling createStreamSubscriptions(Async)");
        }

        return createStreamSubscriptionsCall(streamId, streamSubscriptionPostRequest, _callback);

    }

    /**
     * Create Subscription
     * This API provides capability to create user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param streamSubscriptionPostRequest  (required)
     * @return StreamSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public StreamSubscription createStreamSubscriptions(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull StreamSubscriptionPostRequest streamSubscriptionPostRequest) throws ApiException {
        ApiResponse<StreamSubscription> localVarResp = createStreamSubscriptionsWithHttpInfo(streamId, streamSubscriptionPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create Subscription
     * This API provides capability to create user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param streamSubscriptionPostRequest  (required)
     * @return ApiResponse&lt;StreamSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamSubscription> createStreamSubscriptionsWithHttpInfo(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull StreamSubscriptionPostRequest streamSubscriptionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createStreamSubscriptionsValidateBeforeCall(streamId, streamSubscriptionPostRequest, null);
        Type localVarReturnType = new TypeToken<StreamSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Subscription (asynchronously)
     * This API provides capability to create user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param streamSubscriptionPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamSubscriptionsAsync(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull StreamSubscriptionPostRequest streamSubscriptionPostRequest, final ApiCallback<StreamSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamSubscriptionsValidateBeforeCall(streamId, streamSubscriptionPostRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStreamSubscriptionByUuid
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamSubscriptionByUuidCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/subscriptions/{subscriptionId}"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStreamSubscriptionByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling deleteStreamSubscriptionByUuid(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteStreamSubscriptionByUuid(Async)");
        }

        return deleteStreamSubscriptionByUuidCall(streamId, subscriptionId, _callback);

    }

    /**
     * Delete Subscription
     * This API provides capability to delete user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @return StreamSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public StreamSubscription deleteStreamSubscriptionByUuid(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId) throws ApiException {
        ApiResponse<StreamSubscription> localVarResp = deleteStreamSubscriptionByUuidWithHttpInfo(streamId, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Delete Subscription
     * This API provides capability to delete user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @return ApiResponse&lt;StreamSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamSubscription> deleteStreamSubscriptionByUuidWithHttpInfo(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = deleteStreamSubscriptionByUuidValidateBeforeCall(streamId, subscriptionId, null);
        Type localVarReturnType = new TypeToken<StreamSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Subscription (asynchronously)
     * This API provides capability to delete user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamSubscriptionByUuidAsync(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, final ApiCallback<StreamSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStreamSubscriptionByUuidValidateBeforeCall(streamId, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<StreamSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamSubscriptionByUuid
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamSubscriptionByUuidCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/subscriptions/{subscriptionId}"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamSubscriptionByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling getStreamSubscriptionByUuid(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getStreamSubscriptionByUuid(Async)");
        }

        return getStreamSubscriptionByUuidCall(streamId, subscriptionId, _callback);

    }

    /**
     * Get Subscription
     * This API provides capability to delete user&#39;s get Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @return StreamSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public StreamSubscription getStreamSubscriptionByUuid(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId) throws ApiException {
        ApiResponse<StreamSubscription> localVarResp = getStreamSubscriptionByUuidWithHttpInfo(streamId, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Get Subscription
     * This API provides capability to delete user&#39;s get Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @return ApiResponse&lt;StreamSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamSubscription> getStreamSubscriptionByUuidWithHttpInfo(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = getStreamSubscriptionByUuidValidateBeforeCall(streamId, subscriptionId, null);
        Type localVarReturnType = new TypeToken<StreamSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Subscription (asynchronously)
     * This API provides capability to delete user&#39;s get Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamSubscriptionByUuidAsync(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, final ApiCallback<StreamSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamSubscriptionByUuidValidateBeforeCall(streamId, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<StreamSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamSubscriptions
     * @param streamId Stream UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamSubscriptionsCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/subscriptions"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamSubscriptionsValidateBeforeCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling getStreamSubscriptions(Async)");
        }

        return getStreamSubscriptionsCall(streamId, offset, limit, _callback);

    }

    /**
     * Get Subscriptions
     * This API provides capability to retrieve stream subscriptions
     * @param streamId Stream UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return GetAllStreamSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetAllStreamSubscriptionResponse getStreamSubscriptions(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<GetAllStreamSubscriptionResponse> localVarResp = getStreamSubscriptionsWithHttpInfo(streamId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get Subscriptions
     * This API provides capability to retrieve stream subscriptions
     * @param streamId Stream UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;GetAllStreamSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllStreamSubscriptionResponse> getStreamSubscriptionsWithHttpInfo(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getStreamSubscriptionsValidateBeforeCall(streamId, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetAllStreamSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Subscriptions (asynchronously)
     * This API provides capability to retrieve stream subscriptions
     * @param streamId Stream UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamSubscriptionsAsync(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<GetAllStreamSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamSubscriptionsValidateBeforeCall(streamId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetAllStreamSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStreamSubscriptionByUuid
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @param streamSubscriptionPutRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamSubscriptionByUuidCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, @javax.annotation.Nonnull StreamSubscriptionPutRequest streamSubscriptionPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamSubscriptionPutRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/subscriptions/{subscriptionId}"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStreamSubscriptionByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, @javax.annotation.Nonnull StreamSubscriptionPutRequest streamSubscriptionPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling updateStreamSubscriptionByUuid(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateStreamSubscriptionByUuid(Async)");
        }

        // verify the required parameter 'streamSubscriptionPutRequest' is set
        if (streamSubscriptionPutRequest == null) {
            throw new ApiException("Missing the required parameter 'streamSubscriptionPutRequest' when calling updateStreamSubscriptionByUuid(Async)");
        }

        return updateStreamSubscriptionByUuidCall(streamId, subscriptionId, streamSubscriptionPutRequest, _callback);

    }

    /**
     * Update Subscription
     * This API provides capability to update user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @param streamSubscriptionPutRequest  (required)
     * @return StreamSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public StreamSubscription updateStreamSubscriptionByUuid(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, @javax.annotation.Nonnull StreamSubscriptionPutRequest streamSubscriptionPutRequest) throws ApiException {
        ApiResponse<StreamSubscription> localVarResp = updateStreamSubscriptionByUuidWithHttpInfo(streamId, subscriptionId, streamSubscriptionPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update Subscription
     * This API provides capability to update user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @param streamSubscriptionPutRequest  (required)
     * @return ApiResponse&lt;StreamSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamSubscription> updateStreamSubscriptionByUuidWithHttpInfo(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, @javax.annotation.Nonnull StreamSubscriptionPutRequest streamSubscriptionPutRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStreamSubscriptionByUuidValidateBeforeCall(streamId, subscriptionId, streamSubscriptionPutRequest, null);
        Type localVarReturnType = new TypeToken<StreamSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Subscription (asynchronously)
     * This API provides capability to update user&#39;s Stream Subscriptions
     * @param streamId Stream UUID (required)
     * @param subscriptionId Stream Subscription UUID (required)
     * @param streamSubscriptionPutRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Subscription object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamSubscriptionByUuidAsync(@javax.annotation.Nonnull UUID streamId, @javax.annotation.Nonnull UUID subscriptionId, @javax.annotation.Nonnull StreamSubscriptionPutRequest streamSubscriptionPutRequest, final ApiCallback<StreamSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStreamSubscriptionByUuidValidateBeforeCall(streamId, subscriptionId, streamSubscriptionPutRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
