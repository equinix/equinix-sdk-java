/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import java.util.Locale;
import com.equinix.sdk.fabricv4.model.ConnectivitySource;
import com.equinix.sdk.fabricv4.model.LinkAggregationGroup;
import com.equinix.sdk.fabricv4.model.VirtualPortConfiguration;
import com.equinix.sdk.fabricv4.model.VirtualPortLocation;
import com.equinix.sdk.fabricv4.model.VirtualPortPackage;
import com.equinix.sdk.fabricv4.model.VirtualPortRedundancy;
import com.equinix.sdk.fabricv4.model.VirtualPortServiceType;
import com.equinix.sdk.fabricv4.model.VirtualPortType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.equinix.sdk.fabricv4.JSON;

/**
 * Preferences and settings for a virtual port connected to an internet service provider (ISP) or other Equinix platform entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class VirtualPortPrice {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  @javax.annotation.Nullable
  private UUID uuid;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private VirtualPortType type;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nullable
  private VirtualPortLocation location;

  public static final String SERIALIZED_NAME_LAG = "lag";
  @SerializedName(SERIALIZED_NAME_LAG)
  @javax.annotation.Nullable
  private LinkAggregationGroup lag;

  public static final String SERIALIZED_NAME_PHYSICAL_PORTS_QUANTITY = "physicalPortsQuantity";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_PORTS_QUANTITY)
  @javax.annotation.Nullable
  private Integer physicalPortsQuantity = 1;

  public static final String SERIALIZED_NAME_BANDWIDTH = "bandwidth";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH)
  @javax.annotation.Nullable
  private Integer bandwidth;

  public static final String SERIALIZED_NAME_REDUNDANCY = "redundancy";
  @SerializedName(SERIALIZED_NAME_REDUNDANCY)
  @javax.annotation.Nullable
  private VirtualPortRedundancy redundancy;

  public static final String SERIALIZED_NAME_CONNECTIVITY_SOURCE = "connectivitySource";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY_SOURCE)
  @javax.annotation.Nullable
  private ConnectivitySource connectivitySource;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  @javax.annotation.Nullable
  private VirtualPortServiceType serviceType = VirtualPortServiceType.MSP;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  @javax.annotation.Nullable
  private VirtualPortConfiguration settings;

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  @javax.annotation.Nullable
  private VirtualPortPackage _package;

  public VirtualPortPrice() {
  }

  public VirtualPortPrice uuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Unique identifier assigned to the virtual port. Either the uuid or the remaining attributes must be supplied.
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
  }


  public VirtualPortPrice type(@javax.annotation.Nullable VirtualPortType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public VirtualPortType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable VirtualPortType type) {
    this.type = type;
  }


  public VirtualPortPrice location(@javax.annotation.Nullable VirtualPortLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public VirtualPortLocation getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nullable VirtualPortLocation location) {
    this.location = location;
  }


  public VirtualPortPrice lag(@javax.annotation.Nullable LinkAggregationGroup lag) {
    this.lag = lag;
    return this;
  }

  /**
   * Get lag
   * @return lag
   */
  @javax.annotation.Nullable
  public LinkAggregationGroup getLag() {
    return lag;
  }

  public void setLag(@javax.annotation.Nullable LinkAggregationGroup lag) {
    this.lag = lag;
  }


  public VirtualPortPrice physicalPortsQuantity(@javax.annotation.Nullable Integer physicalPortsQuantity) {
    this.physicalPortsQuantity = physicalPortsQuantity;
    return this;
  }

  /**
   * Number of physical ports requested. The defaults is 1.
   * @return physicalPortsQuantity
   */
  @javax.annotation.Nullable
  public Integer getPhysicalPortsQuantity() {
    return physicalPortsQuantity;
  }

  public void setPhysicalPortsQuantity(@javax.annotation.Nullable Integer physicalPortsQuantity) {
    this.physicalPortsQuantity = physicalPortsQuantity;
  }


  public VirtualPortPrice bandwidth(@javax.annotation.Nullable Integer bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  /**
   * Aggregated data transfer capacity,  expressed as follows &lt;br&gt; -&gt; Mbps, megabits (1 million bits) per second &lt;br&gt; -&gt; Gbps, gigabits (1 billion bits) per second &lt;br&gt; Bandwidth must be divisible by physicalPortsQuantity.
   * @return bandwidth
   */
  @javax.annotation.Nullable
  public Integer getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(@javax.annotation.Nullable Integer bandwidth) {
    this.bandwidth = bandwidth;
  }


  public VirtualPortPrice redundancy(@javax.annotation.Nullable VirtualPortRedundancy redundancy) {
    this.redundancy = redundancy;
    return this;
  }

  /**
   * Get redundancy
   * @return redundancy
   */
  @javax.annotation.Nullable
  public VirtualPortRedundancy getRedundancy() {
    return redundancy;
  }

  public void setRedundancy(@javax.annotation.Nullable VirtualPortRedundancy redundancy) {
    this.redundancy = redundancy;
  }


  public VirtualPortPrice connectivitySource(@javax.annotation.Nullable ConnectivitySource connectivitySource) {
    this.connectivitySource = connectivitySource;
    return this;
  }

  /**
   * Get connectivitySource
   * @return connectivitySource
   */
  @javax.annotation.Nullable
  public ConnectivitySource getConnectivitySource() {
    return connectivitySource;
  }

  public void setConnectivitySource(@javax.annotation.Nullable ConnectivitySource connectivitySource) {
    this.connectivitySource = connectivitySource;
  }


  public VirtualPortPrice serviceType(@javax.annotation.Nullable VirtualPortServiceType serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Get serviceType
   * @return serviceType
   */
  @javax.annotation.Nullable
  public VirtualPortServiceType getServiceType() {
    return serviceType;
  }

  public void setServiceType(@javax.annotation.Nullable VirtualPortServiceType serviceType) {
    this.serviceType = serviceType;
  }


  public VirtualPortPrice settings(@javax.annotation.Nullable VirtualPortConfiguration settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public VirtualPortConfiguration getSettings() {
    return settings;
  }

  public void setSettings(@javax.annotation.Nullable VirtualPortConfiguration settings) {
    this.settings = settings;
  }


  public VirtualPortPrice _package(@javax.annotation.Nullable VirtualPortPackage _package) {
    this._package = _package;
    return this;
  }

  /**
   * Get _package
   * @return _package
   */
  @javax.annotation.Nullable
  public VirtualPortPackage getPackage() {
    return _package;
  }

  public void setPackage(@javax.annotation.Nullable VirtualPortPackage _package) {
    this._package = _package;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VirtualPortPrice instance itself
   */
  public VirtualPortPrice putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualPortPrice virtualPortPrice = (VirtualPortPrice) o;
    return Objects.equals(this.uuid, virtualPortPrice.uuid) &&
        Objects.equals(this.type, virtualPortPrice.type) &&
        Objects.equals(this.location, virtualPortPrice.location) &&
        Objects.equals(this.lag, virtualPortPrice.lag) &&
        Objects.equals(this.physicalPortsQuantity, virtualPortPrice.physicalPortsQuantity) &&
        Objects.equals(this.bandwidth, virtualPortPrice.bandwidth) &&
        Objects.equals(this.redundancy, virtualPortPrice.redundancy) &&
        Objects.equals(this.connectivitySource, virtualPortPrice.connectivitySource) &&
        Objects.equals(this.serviceType, virtualPortPrice.serviceType) &&
        Objects.equals(this.settings, virtualPortPrice.settings) &&
        Objects.equals(this._package, virtualPortPrice._package)&&
        Objects.equals(this.additionalProperties, virtualPortPrice.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, type, location, lag, physicalPortsQuantity, bandwidth, redundancy, connectivitySource, serviceType, settings, _package, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualPortPrice {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("    physicalPortsQuantity: ").append(toIndentedString(physicalPortsQuantity)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    redundancy: ").append(toIndentedString(redundancy)).append("\n");
    sb.append("    connectivitySource: ").append(toIndentedString(connectivitySource)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("uuid", "type", "location", "lag", "physicalPortsQuantity", "bandwidth", "redundancy", "connectivitySource", "serviceType", "settings", "package"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualPortPrice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualPortPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in VirtualPortPrice is not found in the empty JSON string", VirtualPortPrice.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        VirtualPortType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        VirtualPortLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `lag`
      if (jsonObj.get("lag") != null && !jsonObj.get("lag").isJsonNull()) {
        LinkAggregationGroup.validateJsonElement(jsonObj.get("lag"));
      }
      // validate the optional field `redundancy`
      if (jsonObj.get("redundancy") != null && !jsonObj.get("redundancy").isJsonNull()) {
        VirtualPortRedundancy.validateJsonElement(jsonObj.get("redundancy"));
      }
      // validate the optional field `connectivitySource`
      if (jsonObj.get("connectivitySource") != null && !jsonObj.get("connectivitySource").isJsonNull()) {
        ConnectivitySource.validateJsonElement(jsonObj.get("connectivitySource"));
      }
      // validate the optional field `serviceType`
      if (jsonObj.get("serviceType") != null && !jsonObj.get("serviceType").isJsonNull()) {
        VirtualPortServiceType.validateJsonElement(jsonObj.get("serviceType"));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        VirtualPortConfiguration.validateJsonElement(jsonObj.get("settings"));
      }
      // validate the optional field `package`
      if (jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) {
        VirtualPortPackage.validateJsonElement(jsonObj.get("package"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualPortPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualPortPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualPortPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualPortPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualPortPrice>() {
           @Override
           public void write(JsonWriter out, VirtualPortPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualPortPrice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             VirtualPortPrice instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualPortPrice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualPortPrice
   * @throws IOException if the JSON string is invalid with respect to VirtualPortPrice
   */
  public static VirtualPortPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualPortPrice.class);
  }

  /**
   * Convert an instance of VirtualPortPrice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

