/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Possible field names to use on filters
 */
@JsonAdapter(SearchFieldName.Adapter.class)
public enum SearchFieldName {
  
  _IS_REMOTE("/isRemote"),
  
  _NAME("/name"),
  
  _UUID("/uuid"),
  
  _TYPE("/type"),
  
  _GEO_SCOPE("/geoScope"),
  
  _ACCOUNT_ORG_ID("/account/orgId"),
  
  _A_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NAME("/aSide/accessPoint/account/accountName"),
  
  _A_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NUMBER("/aSide/accessPoint/account/accountNumber"),
  
  _A_SIDE_ACCESS_POINT_ROUTER_UUID("/aSide/accessPoint/router/uuid"),
  
  _A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_C_TAG("/aSide/accessPoint/linkProtocol/vlanCTag"),
  
  _A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_S_TAG("/aSide/accessPoint/linkProtocol/vlanSTag"),
  
  _A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_TAG_MIN("/aSide/accessPoint/linkProtocol/vlanTagMin"),
  
  _A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_TAG_MAX("/aSide/accessPoint/linkProtocol/vlanTagMax"),
  
  _A_SIDE_ACCESS_POINT_LOCATION_METRO_CODE("/aSide/accessPoint/location/metroCode"),
  
  _A_SIDE_ACCESS_POINT_LOCATION_METRO_NAME("/aSide/accessPoint/location/metroName"),
  
  _A_SIDE_ACCESS_POINT_NAME("/aSide/accessPoint/name"),
  
  _A_SIDE_ACCESS_POINT_PORT_UUID("/aSide/accessPoint/port/uuid"),
  
  _A_SIDE_ACCESS_POINT_PORT_NAME("/aSide/accessPoint/port/name"),
  
  _A_SIDE_ACCESS_POINT_TYPE("/aSide/accessPoint/type"),
  
  _A_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_NAME("/aSide/accessPoint/virtualDevice/name"),
  
  _A_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_UUID("/aSide/accessPoint/virtualDevice/uuid"),
  
  _A_SIDE_SERVICE_TOKEN_UUID("/aSide/serviceToken/uuid"),
  
  _CHANGE_STATUS("/change/status"),
  
  _OPERATION_EQUINIX_STATUS("/operation/equinixStatus"),
  
  _OPERATION_PROVIDER_STATUS("/operation/providerStatus"),
  
  _PROJECT_PROJECT_ID("/project/projectId"),
  
  _REDUNDANCY_GROUP("/redundancy/group"),
  
  _REDUNDANCY_PRIORITY("/redundancy/priority"),
  
  _Z_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NAME("/zSide/accessPoint/account/accountName"),
  
  _Z_SIDE_ACCESS_POINT_AUTHENTICATION_KEY("/zSide/accessPoint/authenticationKey"),
  
  _Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_C_TAG("/zSide/accessPoint/linkProtocol/vlanCTag"),
  
  _Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_S_TAG("/zSide/accessPoint/linkProtocol/vlanSTag"),
  
  _Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_TAG_MIN("/zSide/accessPoint/linkProtocol/vlanTagMin"),
  
  _Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_TAG_MAX("/zSide/accessPoint/linkProtocol/vlanTagMax"),
  
  _Z_SIDE_ACCESS_POINT_LOCATION_METRO_CODE("/zSide/accessPoint/location/metroCode"),
  
  _Z_SIDE_ACCESS_POINT_LOCATION_METRO_NAME("/zSide/accessPoint/location/metroName"),
  
  _Z_SIDE_ACCESS_POINT_NAME("/zSide/accessPoint/name"),
  
  _Z_SIDE_ACCESS_POINT_PORT_UUID("/zSide/accessPoint/port/uuid"),
  
  _Z_SIDE_ACCESS_POINT_NETWORK_UUID("/zSide/accessPoint/network/uuid"),
  
  _Z_SIDE_ACCESS_POINT_PORT_NAME("/zSide/accessPoint/port/name"),
  
  _Z_SIDE_ACCESS_POINT_PROFILE_UUID("/zSide/accessPoint/profile/uuid"),
  
  _Z_SIDE_ACCESS_POINT_TYPE("/zSide/accessPoint/type"),
  
  _Z_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_NAME("/zSide/accessPoint/virtualDevice/name"),
  
  _Z_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_UUID("/zSide/accessPoint/virtualDevice/uuid"),
  
  _Z_SIDE_SERVICE_TOKEN_UUID("/zSide/serviceToken/uuid"),
  
  _Z_SIDE_INTERNET_ACCESS_UUID("/zSide/internetAccess/uuid"),
  
  STAR("*");

  private String value;

  SearchFieldName(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SearchFieldName fromValue(String value) {
    for (SearchFieldName b : SearchFieldName.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<SearchFieldName> {
    @Override
    public void write(final JsonWriter jsonWriter, final SearchFieldName enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public SearchFieldName read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return SearchFieldName.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    SearchFieldName.fromValue(value);
  }
}

