/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import java.util.Locale;
import com.equinix.sdk.fabricv4.model.AccessPointType;
import com.equinix.sdk.fabricv4.model.CloudRouter;
import com.equinix.sdk.fabricv4.model.MetalInterconnection;
import com.equinix.sdk.fabricv4.model.ModelInterface;
import com.equinix.sdk.fabricv4.model.PeeringType;
import com.equinix.sdk.fabricv4.model.SimplifiedAccount;
import com.equinix.sdk.fabricv4.model.SimplifiedLinkProtocol;
import com.equinix.sdk.fabricv4.model.SimplifiedLocation;
import com.equinix.sdk.fabricv4.model.SimplifiedNetwork;
import com.equinix.sdk.fabricv4.model.SimplifiedPort;
import com.equinix.sdk.fabricv4.model.SimplifiedServiceProfile;
import com.equinix.sdk.fabricv4.model.VirtualDevice;
import com.equinix.sdk.fabricv4.model.VirtualNetwork;
import com.equinix.sdk.fabricv4.model.VpicInterface;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.equinix.sdk.fabricv4.JSON;

/**
 * Access point object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class AccessPoint {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private AccessPointType type;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private SimplifiedAccount account;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nullable
  private SimplifiedLocation location;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nullable
  private SimplifiedPort port;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  @javax.annotation.Nullable
  private SimplifiedServiceProfile profile;

  public static final String SERIALIZED_NAME_ROUTER = "router";
  @SerializedName(SERIALIZED_NAME_ROUTER)
  @javax.annotation.Nullable
  private CloudRouter router;

  public static final String SERIALIZED_NAME_LINK_PROTOCOL = "linkProtocol";
  @SerializedName(SERIALIZED_NAME_LINK_PROTOCOL)
  @javax.annotation.Nullable
  private SimplifiedLinkProtocol linkProtocol;

  public static final String SERIALIZED_NAME_VIRTUAL_DEVICE = "virtualDevice";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_DEVICE)
  @javax.annotation.Nullable
  private VirtualDevice virtualDevice;

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  @javax.annotation.Nullable
  private ModelInterface _interface;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  @javax.annotation.Nullable
  private SimplifiedNetwork network;

  public static final String SERIALIZED_NAME_SELLER_REGION = "sellerRegion";
  @SerializedName(SERIALIZED_NAME_SELLER_REGION)
  @javax.annotation.Nullable
  private String sellerRegion;

  public static final String SERIALIZED_NAME_PEERING_TYPE = "peeringType";
  @SerializedName(SERIALIZED_NAME_PEERING_TYPE)
  @javax.annotation.Nullable
  private PeeringType peeringType;

  public static final String SERIALIZED_NAME_AUTHENTICATION_KEY = "authenticationKey";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_KEY)
  @javax.annotation.Nullable
  private String authenticationKey;

  public static final String SERIALIZED_NAME_PROVIDER_CONNECTION_ID = "providerConnectionId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CONNECTION_ID)
  @javax.annotation.Nullable
  private String providerConnectionId;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK = "virtualNetwork";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK)
  @javax.annotation.Nullable
  private VirtualNetwork virtualNetwork;

  public static final String SERIALIZED_NAME_INTERCONNECTION = "interconnection";
  @SerializedName(SERIALIZED_NAME_INTERCONNECTION)
  @javax.annotation.Nullable
  private MetalInterconnection interconnection;

  public static final String SERIALIZED_NAME_VPIC_INTERFACE = "vpic_interface";
  @SerializedName(SERIALIZED_NAME_VPIC_INTERFACE)
  @javax.annotation.Nullable
  private VpicInterface vpicInterface;

  /**
   * E-Tree network connection role
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    LEAF("LEAF"),
    
    ROOT("ROOT");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  @javax.annotation.Nullable
  private RoleEnum role;

  public AccessPoint() {
  }

  public AccessPoint type(@javax.annotation.Nullable AccessPointType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public AccessPointType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable AccessPointType type) {
    this.type = type;
  }


  public AccessPoint account(@javax.annotation.Nullable SimplifiedAccount account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public SimplifiedAccount getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable SimplifiedAccount account) {
    this.account = account;
  }


  public AccessPoint location(@javax.annotation.Nullable SimplifiedLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public SimplifiedLocation getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nullable SimplifiedLocation location) {
    this.location = location;
  }


  public AccessPoint port(@javax.annotation.Nullable SimplifiedPort port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public SimplifiedPort getPort() {
    return port;
  }

  public void setPort(@javax.annotation.Nullable SimplifiedPort port) {
    this.port = port;
  }


  public AccessPoint profile(@javax.annotation.Nullable SimplifiedServiceProfile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public SimplifiedServiceProfile getProfile() {
    return profile;
  }

  public void setProfile(@javax.annotation.Nullable SimplifiedServiceProfile profile) {
    this.profile = profile;
  }


  public AccessPoint router(@javax.annotation.Nullable CloudRouter router) {
    this.router = router;
    return this;
  }

  /**
   * Get router
   * @return router
   */
  @javax.annotation.Nullable
  public CloudRouter getRouter() {
    return router;
  }

  public void setRouter(@javax.annotation.Nullable CloudRouter router) {
    this.router = router;
  }


  public AccessPoint linkProtocol(@javax.annotation.Nullable SimplifiedLinkProtocol linkProtocol) {
    this.linkProtocol = linkProtocol;
    return this;
  }

  /**
   * Get linkProtocol
   * @return linkProtocol
   */
  @javax.annotation.Nullable
  public SimplifiedLinkProtocol getLinkProtocol() {
    return linkProtocol;
  }

  public void setLinkProtocol(@javax.annotation.Nullable SimplifiedLinkProtocol linkProtocol) {
    this.linkProtocol = linkProtocol;
  }


  public AccessPoint virtualDevice(@javax.annotation.Nullable VirtualDevice virtualDevice) {
    this.virtualDevice = virtualDevice;
    return this;
  }

  /**
   * Get virtualDevice
   * @return virtualDevice
   */
  @javax.annotation.Nullable
  public VirtualDevice getVirtualDevice() {
    return virtualDevice;
  }

  public void setVirtualDevice(@javax.annotation.Nullable VirtualDevice virtualDevice) {
    this.virtualDevice = virtualDevice;
  }


  public AccessPoint _interface(@javax.annotation.Nullable ModelInterface _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * Get _interface
   * @return _interface
   */
  @javax.annotation.Nullable
  public ModelInterface getInterface() {
    return _interface;
  }

  public void setInterface(@javax.annotation.Nullable ModelInterface _interface) {
    this._interface = _interface;
  }


  public AccessPoint network(@javax.annotation.Nullable SimplifiedNetwork network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public SimplifiedNetwork getNetwork() {
    return network;
  }

  public void setNetwork(@javax.annotation.Nullable SimplifiedNetwork network) {
    this.network = network;
  }


  public AccessPoint sellerRegion(@javax.annotation.Nullable String sellerRegion) {
    this.sellerRegion = sellerRegion;
    return this;
  }

  /**
   * Access point seller region
   * @return sellerRegion
   */
  @javax.annotation.Nullable
  public String getSellerRegion() {
    return sellerRegion;
  }

  public void setSellerRegion(@javax.annotation.Nullable String sellerRegion) {
    this.sellerRegion = sellerRegion;
  }


  public AccessPoint peeringType(@javax.annotation.Nullable PeeringType peeringType) {
    this.peeringType = peeringType;
    return this;
  }

  /**
   * Get peeringType
   * @return peeringType
   */
  @javax.annotation.Nullable
  public PeeringType getPeeringType() {
    return peeringType;
  }

  public void setPeeringType(@javax.annotation.Nullable PeeringType peeringType) {
    this.peeringType = peeringType;
  }


  public AccessPoint authenticationKey(@javax.annotation.Nullable String authenticationKey) {
    this.authenticationKey = authenticationKey;
    return this;
  }

  /**
   * Access point authentication key
   * @return authenticationKey
   */
  @javax.annotation.Nullable
  public String getAuthenticationKey() {
    return authenticationKey;
  }

  public void setAuthenticationKey(@javax.annotation.Nullable String authenticationKey) {
    this.authenticationKey = authenticationKey;
  }


  public AccessPoint providerConnectionId(@javax.annotation.Nullable String providerConnectionId) {
    this.providerConnectionId = providerConnectionId;
    return this;
  }

  /**
   * Provider assigned Connection Id
   * @return providerConnectionId
   */
  @javax.annotation.Nullable
  public String getProviderConnectionId() {
    return providerConnectionId;
  }

  public void setProviderConnectionId(@javax.annotation.Nullable String providerConnectionId) {
    this.providerConnectionId = providerConnectionId;
  }


  public AccessPoint virtualNetwork(@javax.annotation.Nullable VirtualNetwork virtualNetwork) {
    this.virtualNetwork = virtualNetwork;
    return this;
  }

  /**
   * Get virtualNetwork
   * @return virtualNetwork
   */
  @javax.annotation.Nullable
  public VirtualNetwork getVirtualNetwork() {
    return virtualNetwork;
  }

  public void setVirtualNetwork(@javax.annotation.Nullable VirtualNetwork virtualNetwork) {
    this.virtualNetwork = virtualNetwork;
  }


  public AccessPoint interconnection(@javax.annotation.Nullable MetalInterconnection interconnection) {
    this.interconnection = interconnection;
    return this;
  }

  /**
   * Get interconnection
   * @return interconnection
   */
  @javax.annotation.Nullable
  public MetalInterconnection getInterconnection() {
    return interconnection;
  }

  public void setInterconnection(@javax.annotation.Nullable MetalInterconnection interconnection) {
    this.interconnection = interconnection;
  }


  public AccessPoint vpicInterface(@javax.annotation.Nullable VpicInterface vpicInterface) {
    this.vpicInterface = vpicInterface;
    return this;
  }

  /**
   * Get vpicInterface
   * @return vpicInterface
   */
  @javax.annotation.Nullable
  public VpicInterface getVpicInterface() {
    return vpicInterface;
  }

  public void setVpicInterface(@javax.annotation.Nullable VpicInterface vpicInterface) {
    this.vpicInterface = vpicInterface;
  }


  public AccessPoint role(@javax.annotation.Nullable RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * E-Tree network connection role
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(@javax.annotation.Nullable RoleEnum role) {
    this.role = role;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccessPoint instance itself
   */
  public AccessPoint putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessPoint accessPoint = (AccessPoint) o;
    return Objects.equals(this.type, accessPoint.type) &&
        Objects.equals(this.account, accessPoint.account) &&
        Objects.equals(this.location, accessPoint.location) &&
        Objects.equals(this.port, accessPoint.port) &&
        Objects.equals(this.profile, accessPoint.profile) &&
        Objects.equals(this.router, accessPoint.router) &&
        Objects.equals(this.linkProtocol, accessPoint.linkProtocol) &&
        Objects.equals(this.virtualDevice, accessPoint.virtualDevice) &&
        Objects.equals(this._interface, accessPoint._interface) &&
        Objects.equals(this.network, accessPoint.network) &&
        Objects.equals(this.sellerRegion, accessPoint.sellerRegion) &&
        Objects.equals(this.peeringType, accessPoint.peeringType) &&
        Objects.equals(this.authenticationKey, accessPoint.authenticationKey) &&
        Objects.equals(this.providerConnectionId, accessPoint.providerConnectionId) &&
        Objects.equals(this.virtualNetwork, accessPoint.virtualNetwork) &&
        Objects.equals(this.interconnection, accessPoint.interconnection) &&
        Objects.equals(this.vpicInterface, accessPoint.vpicInterface) &&
        Objects.equals(this.role, accessPoint.role)&&
        Objects.equals(this.additionalProperties, accessPoint.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, account, location, port, profile, router, linkProtocol, virtualDevice, _interface, network, sellerRegion, peeringType, authenticationKey, providerConnectionId, virtualNetwork, interconnection, vpicInterface, role, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessPoint {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    router: ").append(toIndentedString(router)).append("\n");
    sb.append("    linkProtocol: ").append(toIndentedString(linkProtocol)).append("\n");
    sb.append("    virtualDevice: ").append(toIndentedString(virtualDevice)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    sellerRegion: ").append(toIndentedString(sellerRegion)).append("\n");
    sb.append("    peeringType: ").append(toIndentedString(peeringType)).append("\n");
    sb.append("    authenticationKey: ").append(toIndentedString(authenticationKey)).append("\n");
    sb.append("    providerConnectionId: ").append(toIndentedString(providerConnectionId)).append("\n");
    sb.append("    virtualNetwork: ").append(toIndentedString(virtualNetwork)).append("\n");
    sb.append("    interconnection: ").append(toIndentedString(interconnection)).append("\n");
    sb.append("    vpicInterface: ").append(toIndentedString(vpicInterface)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("type", "account", "location", "port", "profile", "router", "linkProtocol", "virtualDevice", "interface", "network", "sellerRegion", "peeringType", "authenticationKey", "providerConnectionId", "virtualNetwork", "interconnection", "vpic_interface", "role"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in AccessPoint is not found in the empty JSON string", AccessPoint.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        AccessPointType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        SimplifiedAccount.validateJsonElement(jsonObj.get("account"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        SimplifiedLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `port`
      if (jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) {
        SimplifiedPort.validateJsonElement(jsonObj.get("port"));
      }
      // validate the optional field `profile`
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) {
        SimplifiedServiceProfile.validateJsonElement(jsonObj.get("profile"));
      }
      // validate the optional field `router`
      if (jsonObj.get("router") != null && !jsonObj.get("router").isJsonNull()) {
        CloudRouter.validateJsonElement(jsonObj.get("router"));
      }
      // validate the optional field `linkProtocol`
      if (jsonObj.get("linkProtocol") != null && !jsonObj.get("linkProtocol").isJsonNull()) {
        SimplifiedLinkProtocol.validateJsonElement(jsonObj.get("linkProtocol"));
      }
      // validate the optional field `virtualDevice`
      if (jsonObj.get("virtualDevice") != null && !jsonObj.get("virtualDevice").isJsonNull()) {
        VirtualDevice.validateJsonElement(jsonObj.get("virtualDevice"));
      }
      // validate the optional field `interface`
      if (jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) {
        ModelInterface.validateJsonElement(jsonObj.get("interface"));
      }
      // validate the optional field `network`
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) {
        SimplifiedNetwork.validateJsonElement(jsonObj.get("network"));
      }
      if ((jsonObj.get("sellerRegion") != null && !jsonObj.get("sellerRegion").isJsonNull()) && !jsonObj.get("sellerRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `sellerRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerRegion").toString()));
      }
      // validate the optional field `peeringType`
      if (jsonObj.get("peeringType") != null && !jsonObj.get("peeringType").isJsonNull()) {
        PeeringType.validateJsonElement(jsonObj.get("peeringType"));
      }
      if ((jsonObj.get("authenticationKey") != null && !jsonObj.get("authenticationKey").isJsonNull()) && !jsonObj.get("authenticationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `authenticationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationKey").toString()));
      }
      if ((jsonObj.get("providerConnectionId") != null && !jsonObj.get("providerConnectionId").isJsonNull()) && !jsonObj.get("providerConnectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `providerConnectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerConnectionId").toString()));
      }
      // validate the optional field `virtualNetwork`
      if (jsonObj.get("virtualNetwork") != null && !jsonObj.get("virtualNetwork").isJsonNull()) {
        VirtualNetwork.validateJsonElement(jsonObj.get("virtualNetwork"));
      }
      // validate the optional field `interconnection`
      if (jsonObj.get("interconnection") != null && !jsonObj.get("interconnection").isJsonNull()) {
        MetalInterconnection.validateJsonElement(jsonObj.get("interconnection"));
      }
      // validate the optional field `vpic_interface`
      if (jsonObj.get("vpic_interface") != null && !jsonObj.get("vpic_interface").isJsonNull()) {
        VpicInterface.validateJsonElement(jsonObj.get("vpic_interface"));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessPoint>() {
           @Override
           public void write(JsonWriter out, AccessPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AccessPoint instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessPoint
   * @throws IOException if the JSON string is invalid with respect to AccessPoint
   */
  public static AccessPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessPoint.class);
  }

  /**
   * Convert an instance of AccessPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

