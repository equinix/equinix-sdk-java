/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import com.equinix.sdk.fabricv4.model.CloudEventData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.equinix.sdk.fabricv4.JSON;

/**
 * Cloud Event object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CloudEvent {
  public static final String SERIALIZED_NAME_SPEC = "spec";
  @SerializedName(SERIALIZED_NAME_SPEC)
  @javax.annotation.Nullable
  private String spec;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  @javax.annotation.Nullable
  private String source;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_DATASCHEMA = "dataschema";
  @SerializedName(SERIALIZED_NAME_DATASCHEMA)
  @javax.annotation.Nullable
  private String dataschema;

  public static final String SERIALIZED_NAME_DATACONTENTTYPE = "datacontenttype";
  @SerializedName(SERIALIZED_NAME_DATACONTENTTYPE)
  @javax.annotation.Nullable
  private String datacontenttype;

  public static final String SERIALIZED_NAME_SEVERITYNUMBER = "severitynumber";
  @SerializedName(SERIALIZED_NAME_SEVERITYNUMBER)
  @javax.annotation.Nullable
  private String severitynumber;

  public static final String SERIALIZED_NAME_SEVERITYTEXT = "severitytext";
  @SerializedName(SERIALIZED_NAME_SEVERITYTEXT)
  @javax.annotation.Nullable
  private String severitytext;

  public static final String SERIALIZED_NAME_EQUINIXPROJECT = "equinixproject";
  @SerializedName(SERIALIZED_NAME_EQUINIXPROJECT)
  @javax.annotation.Nullable
  private UUID equinixproject;

  public static final String SERIALIZED_NAME_AUTHTYPE = "authtype";
  @SerializedName(SERIALIZED_NAME_AUTHTYPE)
  @javax.annotation.Nullable
  private String authtype;

  public static final String SERIALIZED_NAME_AUTHID = "authid";
  @SerializedName(SERIALIZED_NAME_AUTHID)
  @javax.annotation.Nullable
  private String authid;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nullable
  private CloudEventData data;

  public CloudEvent() {
  }

  public CloudEvent(
     String spec
  ) {
    this();
    this.spec = spec;
  }

  /**
   * Cloud Event Open Telemetry specification
   * @return spec
   */
  @javax.annotation.Nullable
  public String getSpec() {
    return spec;
  }



  public CloudEvent source(@javax.annotation.Nullable String source) {
    this.source = source;
    return this;
  }

  /**
   * Cloud Event source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(@javax.annotation.Nullable String source) {
    this.source = source;
  }


  public CloudEvent id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Cloud Event identifier
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public CloudEvent type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Equinix supported event type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public CloudEvent subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Cloud Event subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public CloudEvent dataschema(@javax.annotation.Nullable String dataschema) {
    this.dataschema = dataschema;
    return this;
  }

  /**
   * Cloud Event dataschema reference
   * @return dataschema
   */
  @javax.annotation.Nullable
  public String getDataschema() {
    return dataschema;
  }

  public void setDataschema(@javax.annotation.Nullable String dataschema) {
    this.dataschema = dataschema;
  }


  public CloudEvent datacontenttype(@javax.annotation.Nullable String datacontenttype) {
    this.datacontenttype = datacontenttype;
    return this;
  }

  /**
   * Cloud Event data content type
   * @return datacontenttype
   */
  @javax.annotation.Nullable
  public String getDatacontenttype() {
    return datacontenttype;
  }

  public void setDatacontenttype(@javax.annotation.Nullable String datacontenttype) {
    this.datacontenttype = datacontenttype;
  }


  public CloudEvent severitynumber(@javax.annotation.Nullable String severitynumber) {
    this.severitynumber = severitynumber;
    return this;
  }

  /**
   * Cloud Event severity number
   * @return severitynumber
   */
  @javax.annotation.Nullable
  public String getSeveritynumber() {
    return severitynumber;
  }

  public void setSeveritynumber(@javax.annotation.Nullable String severitynumber) {
    this.severitynumber = severitynumber;
  }


  public CloudEvent severitytext(@javax.annotation.Nullable String severitytext) {
    this.severitytext = severitytext;
    return this;
  }

  /**
   * Cloud Event severity text
   * @return severitytext
   */
  @javax.annotation.Nullable
  public String getSeveritytext() {
    return severitytext;
  }

  public void setSeveritytext(@javax.annotation.Nullable String severitytext) {
    this.severitytext = severitytext;
  }


  public CloudEvent equinixproject(@javax.annotation.Nullable UUID equinixproject) {
    this.equinixproject = equinixproject;
    return this;
  }

  /**
   * Equinix project identifier
   * @return equinixproject
   */
  @javax.annotation.Nullable
  public UUID getEquinixproject() {
    return equinixproject;
  }

  public void setEquinixproject(@javax.annotation.Nullable UUID equinixproject) {
    this.equinixproject = equinixproject;
  }


  public CloudEvent authtype(@javax.annotation.Nullable String authtype) {
    this.authtype = authtype;
    return this;
  }

  /**
   * Cloud Event auth type
   * @return authtype
   */
  @javax.annotation.Nullable
  public String getAuthtype() {
    return authtype;
  }

  public void setAuthtype(@javax.annotation.Nullable String authtype) {
    this.authtype = authtype;
  }


  public CloudEvent authid(@javax.annotation.Nullable String authid) {
    this.authid = authid;
    return this;
  }

  /**
   * Cloud Event user identifier
   * @return authid
   */
  @javax.annotation.Nullable
  public String getAuthid() {
    return authid;
  }

  public void setAuthid(@javax.annotation.Nullable String authid) {
    this.authid = authid;
  }


  public CloudEvent data(@javax.annotation.Nullable CloudEventData data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public CloudEventData getData() {
    return data;
  }

  public void setData(@javax.annotation.Nullable CloudEventData data) {
    this.data = data;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CloudEvent instance itself
   */
  public CloudEvent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudEvent cloudEvent = (CloudEvent) o;
    return Objects.equals(this.spec, cloudEvent.spec) &&
        Objects.equals(this.source, cloudEvent.source) &&
        Objects.equals(this.id, cloudEvent.id) &&
        Objects.equals(this.type, cloudEvent.type) &&
        Objects.equals(this.subject, cloudEvent.subject) &&
        Objects.equals(this.dataschema, cloudEvent.dataschema) &&
        Objects.equals(this.datacontenttype, cloudEvent.datacontenttype) &&
        Objects.equals(this.severitynumber, cloudEvent.severitynumber) &&
        Objects.equals(this.severitytext, cloudEvent.severitytext) &&
        Objects.equals(this.equinixproject, cloudEvent.equinixproject) &&
        Objects.equals(this.authtype, cloudEvent.authtype) &&
        Objects.equals(this.authid, cloudEvent.authid) &&
        Objects.equals(this.data, cloudEvent.data)&&
        Objects.equals(this.additionalProperties, cloudEvent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spec, source, id, type, subject, dataschema, datacontenttype, severitynumber, severitytext, equinixproject, authtype, authid, data, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudEvent {\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    dataschema: ").append(toIndentedString(dataschema)).append("\n");
    sb.append("    datacontenttype: ").append(toIndentedString(datacontenttype)).append("\n");
    sb.append("    severitynumber: ").append(toIndentedString(severitynumber)).append("\n");
    sb.append("    severitytext: ").append(toIndentedString(severitytext)).append("\n");
    sb.append("    equinixproject: ").append(toIndentedString(equinixproject)).append("\n");
    sb.append("    authtype: ").append(toIndentedString(authtype)).append("\n");
    sb.append("    authid: ").append(toIndentedString(authid)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("spec");
    openapiFields.add("source");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("subject");
    openapiFields.add("dataschema");
    openapiFields.add("datacontenttype");
    openapiFields.add("severitynumber");
    openapiFields.add("severitytext");
    openapiFields.add("equinixproject");
    openapiFields.add("authtype");
    openapiFields.add("authid");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudEvent is not found in the empty JSON string", CloudEvent.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("spec") != null && !jsonObj.get("spec").isJsonNull()) && !jsonObj.get("spec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spec").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("dataschema") != null && !jsonObj.get("dataschema").isJsonNull()) && !jsonObj.get("dataschema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataschema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataschema").toString()));
      }
      if ((jsonObj.get("datacontenttype") != null && !jsonObj.get("datacontenttype").isJsonNull()) && !jsonObj.get("datacontenttype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacontenttype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacontenttype").toString()));
      }
      if ((jsonObj.get("severitynumber") != null && !jsonObj.get("severitynumber").isJsonNull()) && !jsonObj.get("severitynumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severitynumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severitynumber").toString()));
      }
      if ((jsonObj.get("severitytext") != null && !jsonObj.get("severitytext").isJsonNull()) && !jsonObj.get("severitytext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severitytext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severitytext").toString()));
      }
      if ((jsonObj.get("equinixproject") != null && !jsonObj.get("equinixproject").isJsonNull()) && !jsonObj.get("equinixproject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `equinixproject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("equinixproject").toString()));
      }
      if ((jsonObj.get("authtype") != null && !jsonObj.get("authtype").isJsonNull()) && !jsonObj.get("authtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authtype").toString()));
      }
      if ((jsonObj.get("authid") != null && !jsonObj.get("authid").isJsonNull()) && !jsonObj.get("authid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authid").toString()));
      }
      // validate the optional field `data`
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        CloudEventData.validateJsonElement(jsonObj.get("data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudEvent>() {
           @Override
           public void write(JsonWriter out, CloudEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CloudEvent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudEvent
   * @throws IOException if the JSON string is invalid with respect to CloudEvent
   */
  public static CloudEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudEvent.class);
  }

  /**
   * Convert an instance of CloudEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

