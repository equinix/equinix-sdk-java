/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.sdk.fabricv4.model;

import java.util.Objects;
import java.util.Locale;
import com.equinix.sdk.fabricv4.model.ConnectedMetro;
import com.equinix.sdk.fabricv4.model.GeoCoordinates;
import com.equinix.sdk.fabricv4.model.GeoScopeType;
import com.equinix.sdk.fabricv4.model.Services;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.equinix.sdk.fabricv4.JSON;

/**
 * GET Metros retrieves all Equinix® Fabric™ metros, as well as latency data for each location.This performance data helps network planning engineers and administrators make strategic decisions about port locations and traffic routes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class Metro {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  @javax.annotation.Nullable
  private String href;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  @javax.annotation.Nullable
  private String region;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_EQUINIX_ASN = "equinixAsn";
  @SerializedName(SERIALIZED_NAME_EQUINIX_ASN)
  @javax.annotation.Nullable
  private Long equinixAsn;

  public static final String SERIALIZED_NAME_LOCAL_V_C_BANDWIDTH_MAX = "localVCBandwidthMax";
  @SerializedName(SERIALIZED_NAME_LOCAL_V_C_BANDWIDTH_MAX)
  @javax.annotation.Nullable
  private Long localVCBandwidthMax;

  public static final String SERIALIZED_NAME_GEO_COORDINATES = "geoCoordinates";
  @SerializedName(SERIALIZED_NAME_GEO_COORDINATES)
  @javax.annotation.Nullable
  private GeoCoordinates geoCoordinates;

  public static final String SERIALIZED_NAME_CONNECTED_METROS = "connectedMetros";
  @SerializedName(SERIALIZED_NAME_CONNECTED_METROS)
  @javax.annotation.Nullable
  private List<ConnectedMetro> connectedMetros = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  @javax.annotation.Nullable
  private List<Services> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_GEO_SCOPES = "geoScopes";
  @SerializedName(SERIALIZED_NAME_GEO_SCOPES)
  @javax.annotation.Nullable
  private List<GeoScopeType> geoScopes = new ArrayList<>();

  public Metro() {
  }

  public Metro href(@javax.annotation.Nullable String href) {
    this.href = href;
    return this;
  }

  /**
   * The Canonical URL at which the resource resides.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(@javax.annotation.Nullable String href) {
    this.href = href;
  }


  public Metro type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Indicator of a Fabric Metro
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public Metro code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Code Assigned to an Equinix IBX data center in a specified metropolitan area.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public Metro region(@javax.annotation.Nullable String region) {
    this.region = region;
    return this;
  }

  /**
   * Board geographic area in which the data center is located
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(@javax.annotation.Nullable String region) {
    this.region = region;
  }


  public Metro name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the region in which the data center is located.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public Metro equinixAsn(@javax.annotation.Nullable Long equinixAsn) {
    this.equinixAsn = equinixAsn;
    return this;
  }

  /**
   * Autonomous system number (ASN) for a specified Fabric metro. The ASN is a unique identifier that carries the network routing protocol and exchanges that data with other internal systems via border gateway protocol.
   * @return equinixAsn
   */
  @javax.annotation.Nullable
  public Long getEquinixAsn() {
    return equinixAsn;
  }

  public void setEquinixAsn(@javax.annotation.Nullable Long equinixAsn) {
    this.equinixAsn = equinixAsn;
  }


  public Metro localVCBandwidthMax(@javax.annotation.Nullable Long localVCBandwidthMax) {
    this.localVCBandwidthMax = localVCBandwidthMax;
    return this;
  }

  /**
   * This field holds Max Connection speed with in the metro
   * @return localVCBandwidthMax
   */
  @javax.annotation.Nullable
  public Long getLocalVCBandwidthMax() {
    return localVCBandwidthMax;
  }

  public void setLocalVCBandwidthMax(@javax.annotation.Nullable Long localVCBandwidthMax) {
    this.localVCBandwidthMax = localVCBandwidthMax;
  }


  public Metro geoCoordinates(@javax.annotation.Nullable GeoCoordinates geoCoordinates) {
    this.geoCoordinates = geoCoordinates;
    return this;
  }

  /**
   * Get geoCoordinates
   * @return geoCoordinates
   */
  @javax.annotation.Nullable
  public GeoCoordinates getGeoCoordinates() {
    return geoCoordinates;
  }

  public void setGeoCoordinates(@javax.annotation.Nullable GeoCoordinates geoCoordinates) {
    this.geoCoordinates = geoCoordinates;
  }


  public Metro connectedMetros(@javax.annotation.Nullable List<ConnectedMetro> connectedMetros) {
    this.connectedMetros = connectedMetros;
    return this;
  }

  public Metro addConnectedMetrosItem(ConnectedMetro connectedMetrosItem) {
    if (this.connectedMetros == null) {
      this.connectedMetros = new ArrayList<>();
    }
    this.connectedMetros.add(connectedMetrosItem);
    return this;
  }

  /**
   * Get connectedMetros
   * @return connectedMetros
   */
  @javax.annotation.Nullable
  public List<ConnectedMetro> getConnectedMetros() {
    return connectedMetros;
  }

  public void setConnectedMetros(@javax.annotation.Nullable List<ConnectedMetro> connectedMetros) {
    this.connectedMetros = connectedMetros;
  }


  public Metro services(@javax.annotation.Nullable List<Services> services) {
    this.services = services;
    return this;
  }

  public Metro addServicesItem(Services servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * Get services
   * @return services
   */
  @javax.annotation.Nullable
  public List<Services> getServices() {
    return services;
  }

  public void setServices(@javax.annotation.Nullable List<Services> services) {
    this.services = services;
  }


  public Metro geoScopes(@javax.annotation.Nullable List<GeoScopeType> geoScopes) {
    this.geoScopes = geoScopes;
    return this;
  }

  public Metro addGeoScopesItem(GeoScopeType geoScopesItem) {
    if (this.geoScopes == null) {
      this.geoScopes = new ArrayList<>();
    }
    this.geoScopes.add(geoScopesItem);
    return this;
  }

  /**
   * List of supported geographic boundaries of a Fabric Metro.
   * @return geoScopes
   */
  @javax.annotation.Nullable
  public List<GeoScopeType> getGeoScopes() {
    return geoScopes;
  }

  public void setGeoScopes(@javax.annotation.Nullable List<GeoScopeType> geoScopes) {
    this.geoScopes = geoScopes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Metro instance itself
   */
  public Metro putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metro metro = (Metro) o;
    return Objects.equals(this.href, metro.href) &&
        Objects.equals(this.type, metro.type) &&
        Objects.equals(this.code, metro.code) &&
        Objects.equals(this.region, metro.region) &&
        Objects.equals(this.name, metro.name) &&
        Objects.equals(this.equinixAsn, metro.equinixAsn) &&
        Objects.equals(this.localVCBandwidthMax, metro.localVCBandwidthMax) &&
        Objects.equals(this.geoCoordinates, metro.geoCoordinates) &&
        Objects.equals(this.connectedMetros, metro.connectedMetros) &&
        Objects.equals(this.services, metro.services) &&
        Objects.equals(this.geoScopes, metro.geoScopes)&&
        Objects.equals(this.additionalProperties, metro.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, type, code, region, name, equinixAsn, localVCBandwidthMax, geoCoordinates, connectedMetros, services, geoScopes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metro {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    equinixAsn: ").append(toIndentedString(equinixAsn)).append("\n");
    sb.append("    localVCBandwidthMax: ").append(toIndentedString(localVCBandwidthMax)).append("\n");
    sb.append("    geoCoordinates: ").append(toIndentedString(geoCoordinates)).append("\n");
    sb.append("    connectedMetros: ").append(toIndentedString(connectedMetros)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    geoScopes: ").append(toIndentedString(geoScopes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("href", "type", "code", "region", "name", "equinixAsn", "localVCBandwidthMax", "geoCoordinates", "connectedMetros", "services", "geoScopes"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metro
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metro.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in Metro is not found in the empty JSON string", Metro.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `geoCoordinates`
      if (jsonObj.get("geoCoordinates") != null && !jsonObj.get("geoCoordinates").isJsonNull()) {
        GeoCoordinates.validateJsonElement(jsonObj.get("geoCoordinates"));
      }
      if (jsonObj.get("connectedMetros") != null && !jsonObj.get("connectedMetros").isJsonNull()) {
        JsonArray jsonArrayconnectedMetros = jsonObj.getAsJsonArray("connectedMetros");
        if (jsonArrayconnectedMetros != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectedMetros").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `connectedMetros` to be an array in the JSON string but got `%s`", jsonObj.get("connectedMetros").toString()));
          }

          // validate the optional field `connectedMetros` (array)
          for (int i = 0; i < jsonArrayconnectedMetros.size(); i++) {
            ConnectedMetro.validateJsonElement(jsonArrayconnectedMetros.get(i));
          };
        }
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            Services.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("geoScopes") != null && !jsonObj.get("geoScopes").isJsonNull() && !jsonObj.get("geoScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `geoScopes` to be an array in the JSON string but got `%s`", jsonObj.get("geoScopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metro.class));

       return (TypeAdapter<T>) new TypeAdapter<Metro>() {
           @Override
           public void write(JsonWriter out, Metro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Metro read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Metro instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metro given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metro
   * @throws IOException if the JSON string is invalid with respect to Metro
   */
  public static Metro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metro.class);
  }

  /**
   * Convert an instance of Metro to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

